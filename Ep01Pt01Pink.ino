//David Inwood
//Jan 2018
//Super Soldiers: Episode 1: The Battle of Fort McMurray, Part 1 (Pink)
#include <Arduboy2.h>
#include <ArduboyTones.h>
Arduboy2 arduboy;
ArduboyTones sound(arduboy.audio.enabled);
//Manipulatable values
const int SpriteCycleTime = 30;
const int EndOfScreen = 128;
const int BackgroundLength = 250;
const int BackgroundBeginning = -127;
const int BackgroundScrollSpeed = 2;
const int MapTargetX = 45;
const int MapTargetY = 34;
const int MapGenerosity = 4;
const int GreenlandY = 12;
const int GreenlandX = 85; //Greenland is the place where you are told that you're not taking your job seriously.
int XError;
int YError;
int SpriteFrame = 0;
enum DirectionOfError {
  None,
  TooFarNorth,
  TooFarSouth,
  TooFarWest,
  TooFarEast,
};
enum GameProgress {
  MonsterChase = 0,               // I want to name all of the game states here
  FirstText,
  GordonsFace1,
  GordonsFace2,
  Transform0,
  Transform1,
  Transform2,
  Transform3,
  Transform4,
  Transform5,
  Transform6,
  GordonsFace3,
  Teleport1,
  Teleport2,
  Teleport3,
  Teleport4,
  Battle1,
  LoseToMutante,
  DefeatMutante,
  LoadNextGame,
};
const int GameOver = 999;
int GameState = MonsterChase;
//Creation of several objects
struct Object{
  int x;
  int y;
  int Width;
  int Height;
};
struct Monster{
  int x;
  int y;
  int Stance;
  int Facing;
  int NearestSoldier;
  int HP;
  int StanceDelay;
};
//Fighter stance lists stances of Mutant√© and all of the Super Soldiers. I do this so I can safely use the same stance name on monster and soldier sprites.
enum FighterStance{
  RestRight,
  StepRight1,
  StepRight2,
  StepRight3,
  StepRight4,
  PunchRightFarTop,
  PunchRightFarLow,
  PunchRightNearTop,
  PunchRightNearLow,
  PunchRight,
  SquatRight,
  KickRight,
  RecoilFromRight,
  RestLeft,
  StepLeft1,
  StepLeft2,
  StepLeft3,
  StepLeft4,
  PunchLeftFarTop,
  PunchLeftFarLow,
  PunchLeftNearTop,
  PunchLeftNearLow,
  PunchLeft,
  SquatLeft,
  KickLeft,
  RecoilFromLeft,
  Dead,
};

enum FighterDirection{
  Left,
  Right,
};

enum SoldierZCoords{
  Close,
  Far,
};

struct SuperSoldier{
  int x;
  int y;
  int z;
  int Stance;
  int Facing;
  int HP;
  int StanceDelay;
  int GroundLevel;
};

enum SoldierClosest{
  PinkSoldier,
  GreenSoldier,
  BlueSoldier
};
Object building = {64, 3, 105, 46};
Object rock1 = {204, 38, 18, 11};
Object fire = {241, 34, 19, 15};
Object rock2 = {272, 37, 18, 12};
Object Mutante = {10, 5, 15, 54};
Object human1 = {50, 47, 16, 16};
Object human2 = {101, 42, 16, 16};
Object FlashingCursor = {90, 32, 2, 2};
const int MutanteReach = 25;
int XClosestToMutante = 80;
int YClosestToMutante = 0;
int ZClosestToMutante = Close;
int SoldierClosest = PinkSoldier;
const int GroundPink = 33;
const int SoldierPunchReach = 25;
const int PinkKickReach = 27;
const int MutanteStartX = 64;
const int PinkStartX = 120;
Monster mutante = {MutanteStartX, 4, StepLeft1, Left, 3,8, 0};
SuperSoldier Pink = {PinkStartX, 0, Close, SquatRight, Right, 5, 0, GroundPink};
const int GroundGreen = 30;
const int GreenStartX = 110;
const int GroundBlue = 33;
const int BlueStartX = 20;
SuperSoldier Green = {GreenStartX, 0, Far, RestLeft, Right, 5, 0, GroundGreen};
SuperSoldier Blue = {BlueStartX, 0, Close, RestLeft, Left, 5, 0, GroundBlue};
//More constants controlling Mutante's pose (that's the name of the monster)
enum MutanteStance {
  LeftFoot,
  EvenFeet,
  RightFoot,
};
//
//
//Graphics
//
const unsigned char HumanMidStep[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xe0, 0xf0, 0xfe, 0x1f, 0x1f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0xe6, 0x3f, 0x19, 0x19, 0x03, 0x02, 0x00, 0x00, 0x00};
const unsigned char HumanFullStep[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x10, 0x10, 0x90, 0xf0, 0xfe, 0x9f, 0x1f, 0x0e, 0x00, 0x08, 0x0c, 0x04, 0x1c, 0x18, 0x08, 0x0c, 0x06, 0x0f, 0x19, 0x70, 0x40, 0x01, 0x01, 0x01, 0x01};
const unsigned char Building[] PROGMEM  = {0xff, 0xab, 0x55, 0xab, 0xd5, 0xab, 0xd5, 0xab, 0xd5, 0xab, 0xd5, 0xab, 0xd5, 0xab, 0xd5, 0xab, 0xd5, 0xab, 0xd5, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55,
0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0x55, 0xab, 0xd5, 0x6b, 0x55, 0x6b, 0x55, 0x6b, 0x55, 0x6b, 0x55, 0x6b, 0x55, 0x6b, 0x55, 0x6b, 0x55, 0xeb, 0x55, 0xab, 0x55, 0xab, 0x55,
0xab, 0x55, 0xeb, 0x55, 0x6b, 0x55, 0x6b, 0x55, 0x6b, 0x55, 0x6b, 0x55, 0x6b, 0x55, 0x6b, 0x55, 0x6b, 0xd5, 0xab, 0x55, 0xab, 0x55, 0xab, 0xff, 0xff, 0xaa, 0x55, 0xaa, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
0x55, 0xaa, 0x55, 0xaa, 0x55, 0xfe, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0xfe, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0x06, 0x05, 0xfe, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0xff, 0x00, 0x10, 0x70,
0xc0, 0xf8, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0xff, 0xff, 0xaa, 0x55,
0xaa, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0xff, 0x00, 0x03, 0x01, 0x01, 0x00, 0x01, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0xff, 0xff, 0xaa, 0x55, 0xaa, 0x5f, 0xb0, 0x50, 0xb0, 0x50, 0xb0, 0x50, 0xb0, 0x50, 0xb0, 0x50, 0xb0, 0x50, 0xb0, 0x50, 0xbf, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x5f, 0xa8, 0x58, 0xa8, 0x58, 0xa8, 0x58, 0xa8, 0x58, 0xa8, 0x58, 0xa8, 0x58, 0xa8,
0x58, 0xaf, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaf, 0x58, 0xa8, 0x58, 0xa8, 0x58, 0xa8, 0x58, 0xa8, 0x58, 0xa8, 0x58, 0xa8, 0x58, 0xa8, 0x5f, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0xff, 0xff, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55,
0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x55, 0xaa, 0x55,
0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55,
0xaa, 0x55, 0xaa, 0xff, 0x3f, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a,
0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x35, 0x2a, 0x3f};
const unsigned char Rock1[] PROGMEM = {0x80, 0xe0, 0x38, 0x0c, 0x06, 0x02, 0x03, 0x03, 0x02, 0x06, 0x0c, 0x18, 0x70, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x03, 0x03, 0x02, 0x03, 0x03};
const unsigned char Fire1[] PROGMEM = {0x80, 0xf0, 0x1e, 0x03, 0x07, 0x0c, 0x38, 0x60, 0x38, 0x0f, 0x07, 0x9c, 0x30, 0x38, 0x0f, 0x01, 0x03, 0x1e, 0xf0, 0x03, 0x0e, 0x38, 0x60, 0x00, 0x00, 0x3f, 0x1a, 0x36, 0x0e, 0x1b, 0x37, 0x3f, 0x00, 0x00, 0x00, 0x60, 0x38, 0x0f};
const unsigned char Fire2[] PROGMEM = {0xe0, 0x3c, 0x07, 0x03, 0x1e, 0x70, 0x60, 0x38, 0x0e, 0x1e, 0x70, 0xc0, 0x70, 0x18, 0x0e, 0x06, 0x3c, 0xe0, 0x00, 0x1f, 0x70, 0xc0, 0x00, 0x00, 0x00, 0x7e, 0x6f, 0x36, 0x0c, 0x7c, 0x34, 0x7e, 0x00, 0x00, 0xc0, 0x70, 0x1d, 0x07};
const unsigned char Rock2[] PROGMEM = {0x60, 0xd0, 0x98, 0x0c, 0x04, 0x06, 0x02, 0x03, 0x3f, 0x10, 0x18, 0x08, 0x08, 0x08, 0x18, 0x10, 0xf0, 0x80, 0x00, 0x00, 0x03, 0x06, 0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x06, 0x02, 0x02, 0x06, 0x04, 0x04, 0x04, 0x07};
const unsigned char ClosedMouth[] PROGMEM = {0x00, 0x04, 0x04, 0x04, 0x00};
//Closed mouth is a 5X5 picture
const unsigned char OpenMouth[] PROGMEM = {0x06, 0x1f, 0x31, 0x23, 0x22, 0x3e};
//Open mouth is  a 6X6 picture
const unsigned char GordonNoMouth[] PROGMEM  = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf, 0xdf, 0xdf, 0xef, 0xf7, 0xf7, 0xfb, 0xfb, 0xfb, 0xfd, 0xfd, 0xfd, 0xfd, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
0xfd, 0xfd, 0xfd, 0xfd, 0xfb, 0xfb, 0xfb, 0xf7, 0xf7, 0xef, 0xdf, 0xdf, 0xbf, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xdf, 0xef, 0xf3, 0xfd, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfd, 0xf3, 0xef, 0xdf, 0x3f, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0x3f, 0xc7, 0xf9, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xc7, 0xf3, 0xfd, 0xfd, 0xfd, 0xfd, 0xf9, 0xf3, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xf3, 0xf9,
0xfd, 0xfd, 0xfd, 0xfd, 0xf3, 0xc7, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfb, 0x87, 0x7f, 0xff, 0xff, 0xff, 0x03, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xe7, 0xcf, 0xdf, 0x9f, 0x9c, 0x9c, 0xbf, 0x9f,
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x9f, 0xbf, 0x9c, 0x9c, 0x9f, 0xdf, 0xcf, 0xe7, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xe0, 0x1f,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0xff, 0xff, 0xfe, 0xf1, 0xcf, 0xbf, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x9f, 0xef, 0xf1, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfd,
0xfb, 0xe7, 0xdf, 0xbf, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f,
0x3f, 0xdf, 0xef, 0xf3, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x67, 0x73, 0x7b, 0x7b, 0x79, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7d, 0x7c, 0x7d, 0x7d, 0x7b, 0x7b, 0x77, 0x6f, 0x6f, 0x6f, 0x6f, 0x5f, 0x5f, 0x5f, 0x5f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x5f, 0x5f, 0x5f, 0x5f, 0x6f, 0x6f, 0x6f, 0x77, 0x73, 0x7b, 0x79, 0x79, 0x7a, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x77, 0x47, 0x1f};
const unsigned char GabbySilent[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0xf0, 0x3c, 0x3e, 0x3f, 0xbf, 0x5f, 0x1f, 0x5f, 0xb1, 0x33, 0x7e, 0x7c, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0x10, 0xb0, 0x10, 0xbf, 0x6c, 0xe8, 0xb0, 0xe0, 0xa4, 0x64, 0xe4, 0xe0, 0xb0, 0x68, 0xae, 0xef,
0xe0, 0xc0, 0x00, 0x03, 0x07, 0x0e, 0x0c, 0x0a, 0x0c, 0xfa, 0xff, 0xf5, 0xeb, 0xdd, 0xfa, 0xd5, 0xee, 0xd7, 0xff, 0x4d, 0x4a, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xff, 0xea, 0xff, 0xea, 0xff, 0x1e, 0xff, 0xea, 0xff, 0xef, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00,
0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01};
const unsigned char GabbyPo[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0xf0, 0x3c, 0x3e, 0x3f, 0xbf, 0x5f, 0x1f, 0x5f, 0xb1, 0x33, 0x7e, 0x7c, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0x10, 0xb0, 0x10, 0xbf, 0x6c, 0xe8, 0xb0, 0xe0, 0xa0, 0x64, 0xe0, 0xe0, 0xb0, 0x68, 0xae, 0xef, 0xe0,
0xc0, 0x00, 0x03, 0x07, 0x0e, 0x0c, 0x0a, 0x0c, 0xfa, 0xff, 0xf5, 0xeb, 0xdd, 0xfa, 0xd5, 0xee, 0xd7, 0xff, 0x4d, 0x4a, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xff, 0xea, 0xff, 0xea, 0xff, 0x1e, 0xff, 0xea, 0xff, 0xef, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01};
const unsigned char GabbyBear[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0xf0, 0x3c, 0x3e, 0x3f, 0xbf, 0x5f, 0x1f, 0x5f, 0xb1, 0x33, 0x7e, 0x7c, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0x10, 0xb0, 0x10, 0xbf, 0x6c, 0xe8, 0xb0, 0xe0, 0xac, 0x6c, 0xec, 0xe0, 0xb0, 0x68, 0xae, 0xef,
0xe0, 0xc0, 0x00, 0x03, 0x07, 0x0e, 0x0c, 0x0a, 0x0c, 0xfa, 0xff, 0xf5, 0xeb, 0xdd, 0xfa, 0xd5, 0xee, 0xd7, 0xff, 0x4d, 0x4a, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xff, 0xea, 0xff, 0xea, 0xff, 0x1e, 0xff, 0xea, 0xff, 0xef, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00,
0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01};
const unsigned char GabbyTransformed[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x18, 0x1c, 0x3a, 0x71, 0xe1, 0xe1, 0xe1, 0x71, 0x3a, 0x1c, 0x18, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xf0, 0x5c, 0xc6, 0x82, 0x86, 0x8c, 0xf8, 0x00, 0x80, 0xc0, 0x40, 0x43, 0x4c, 0x50, 0x60, 0x64, 0x48, 0x48, 0x48, 0x48, 0x64, 0x50, 0x4c, 0x43, 0x40, 0x40, 0xc0, 0x80, 0x00, 0x00, 0x80, 0xfc, 0x46, 0x82, 0x82, 0x86, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
0x1e, 0x03, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x0e, 0x72, 0xda, 0x3e, 0x3e, 0xda, 0x72, 0x0e, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x01, 0x07, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x80, 0xf0, 0x1f, 0x07, 0x0c, 0x18, 0x30, 0x20, 0x20, 0x20, 0x30, 0x18, 0x08, 0x0c, 0xff, 0x80, 0x80, 0x80,
0x83, 0x85, 0x83, 0x83, 0x85, 0x83, 0x80, 0x80, 0x80, 0xff, 0x01, 0x07, 0x3c, 0x60, 0x41, 0x40, 0x60, 0x20, 0x38, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x70, 0x0f, 0x01, 0x01, 0x01, 0x01, 0x01, 0xc1, 0xf9, 0x81, 0x01, 0x01, 0x01,
0x01, 0x1f, 0x70, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0x20, 0x3c, 0x17, 0x31, 0x20, 0x20, 0x60, 0xc0, 0xc0, 0x70, 0x1e, 0x03, 0x00, 0x07, 0x3c, 0x60, 0xc0, 0xc0, 0x40, 0x40, 0x61, 0x2f, 0x78, 0x40, 0xc0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x05, 0x07, 0x00, 0x00, 0x00, 0x00};
const unsigned char Canada[] PROGMEM = {0x00, 0x08, 0x18, 0x30, 0x70, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x80, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xdf, 0xef, 0xf7, 0xf8, 0xf0, 0xe0, 0xe0,
0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x10, 0x18, 0x1c, 0x3e, 0xfe, 0x1c, 0x18, 0x00, 0x00, 0x40, 0xe1, 0x01, 0x00, 0x00, 0x20, 0x30, 0x71, 0x33, 0x03, 0x03, 0x03, 0xe3, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x1f, 0x6f, 0xf7, 0xfb, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x01, 0x03, 0x0f, 0x0e, 0x0e,
0x1c, 0x38, 0xe0, 0xc0, 0x81, 0x87, 0x8f, 0x80, 0x80, 0x80, 0x87, 0x8c, 0x80, 0x80, 0x00, 0x50, 0x58, 0x3e, 0xbc, 0x30, 0x60, 0xc0, 0x01, 0x01, 0xf1, 0xf1, 0x01, 0x03, 0x03, 0x07, 0x0f, 0x0f, 0x1f, 0xbf, 0xfe, 0xfc, 0xf8, 0x98, 0x18, 0xb8, 0x80, 0x80, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x07, 0x07, 0x0f, 0x1f, 0x0f, 0x0e, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0xfb, 0x03, 0xe7, 0xcf, 0x9f, 0xbf, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x1e, 0x70, 0x60, 0x02, 0x06, 0x0e, 0x1e, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f,
0x1f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x30, 0x07, 0x0f, 0x0f, 0x78, 0x30, 0x20, 0x00, 0x00, 0x00, 0x0c, 0x0f, 0x03, 0x01, 0x01, 0x03, 0x03, 0x07, 0x1f, 0x3f, 0x63, 0x27, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xa0, 0x09, 0x1f, 0x1f, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfd, 0x03, 0xfb, 0xfb, 0xfb, 0xf2, 0xf0, 0xf0, 0xb0, 0x10, 0x10, 0x00, 0x06, 0x86, 0x86, 0x8f, 0x8f, 0xcf, 0xdf, 0x1f, 0xdf, 0xdf, 0xdf,
0xdf, 0xdf, 0xdf, 0x0f, 0x03, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x3f, 0x7f, 0xfe, 0xfc, 0xf8, 0xf8, 0xf0, 0xe0, 0xe0, 0xe0, 0xfe, 0xf8, 0xf8, 0xf0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0x03, 0x00, 0x40, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x81, 0x81, 0xc0, 0x00, 0xf1, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0x70, 0x10,
0xd0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x08, 0x00, 0x10, 0x70, 0xf0, 0xf0, 0x60, 0x20,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x88,
0xc7, 0xef, 0xcf, 0xdf, 0x9f, 0xbf, 0x3f, 0x7f, 0x7f, 0xff, 0xfe, 0x71, 0x4f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xe0, 0xe0, 0x81, 0xff, 0xe1, 0x0c, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xfc, 0xf8, 0xf0, 0xe0, 0xe0, 0xbf, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0x43, 0x40, 0x60, 0x70, 0x7a, 0xe1, 0xc1, 0x41, 0x80, 0xc0, 0x42, 0x18, 0x10, 0x20, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfd, 0xfc, 0xfd, 0xfd, 0xfd, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xf8, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xf8, 0xfb, 0xf3, 0xd7, 0xc7, 0x87, 0x81, 0x80, 0x80, 0x01, 0x03, 0x03, 0x07, 0xcf, 0x5f, 0x1f, 0x1f, 
0x1f, 0x1f, 0x3f, 0xff, 0xfe, 0xfd, 0xf9, 0x03, 0x9f, 0xdf, 0xef, 0xf7, 0xf3, 0xf8, 0x3f, 0x0f, 0x07, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xf8, 0x90, 0x80, 0x80, 0x84, 0x87, 0xe3, 0xe1, 0xf0, 0xf0,
0xfc, 0xff, 0xff, 0xff, 0x0f, 0x07, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
//Mutante Fighting Graphics
const unsigned char MutanteRestRight[] PROGMEM = {0x00, 0x1f, 0xff, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xeb, 0xff, 0x0f, 0x00, 0xe0, 0xf0, 0xf3, 0x0f, 0xff, 0xff, 0x0f, 0xf3, 0xe1, 0xc0, 0x00, 0xff, 0xff,
0xff, 0x00, 0xef, 0xef, 0x00, 0xff, 0xff, 0xff, 0x00, 0x01, 0x03, 0xc7, 0xcc, 0xfd, 0xfd, 0xfc, 0xcf, 0xc7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00};
const unsigned char MutanteRestLeft[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0xff, 0x1f, 0x00, 0x0f, 0xff, 0xeb, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x0f, 0xc0, 0xe1, 0xf3, 0x0f, 0xff, 0xff, 0x0f, 0xf3, 0xf0, 0xe0, 0x00, 0xff, 0xff, 0xff,
0x00, 0xef, 0xef, 0x00, 0xff, 0xff, 0xff, 0x00, 0x01, 0xc7, 0xcf, 0xfc, 0xfd, 0xfd, 0xcc, 0xc7, 0x03, 0x01, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char MutanteStepRightFarFoot[] PROGMEM = {0x00, 0x1f, 0xff, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xeb, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf3, 0x0f,
0xff, 0xff, 0x0f, 0xf3, 0xe1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xef, 0xef, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0xc7, 0xcc, 0xfd, 0xfd, 0xfc, 0xcf, 0xc7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf8, 0xff, 
0x7f, 0x3f, 0x1f, 0x3f, 0xfe, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x18, 0x3f, 0x3f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x1f, 0x1e, 0x18};
const unsigned char MutanteStepLeftFarFoot[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xeb, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xc0,
0xe1, 0xf3, 0x0f, 0xff, 0xff, 0x0f, 0xf3, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xef, 0xef, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc7, 0xcf, 0xfc, 0xfd, 0xfd, 0xcc, 0xc7, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 
0xfe, 0x3f, 0x1f, 0x3f, 0x7f, 0xff, 0xf8, 0xc0, 0x00, 0x00, 0x18, 0x1e, 0x1f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x3f, 0x3f, 0x18};
const unsigned char MutanteStepRightNearFoot[] PROGMEM = {0x00, 0x1f, 0xff, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xeb, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf3, 0x0f, 0xff, 0xff,
0x0f, 0xf3, 0xe1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xef, 0xef, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0xc7, 0xcc, 0xfd, 0xfd, 0xfc, 0xcf, 0xc7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xff, 0x3f, 0x1f, 0x3f, 0x7f, 0xfe, 
0xf8, 0xc0, 0x00, 0x00, 0x1e, 0x1f, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x3f, 0x3f, 0x38};
const unsigned char MutanteStepLeftNearFoot[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xeb, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x0f, 0x00, 0x00, 0x00, 0xc0, 0xe1, 0xf3, 0x0f,
0xff, 0xff, 0x0f, 0xf3, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xef, 0xef, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc7, 0xcf, 0xfc, 0xfd, 0xfd, 0xcc, 0xc7, 0x03, 0x01, 0x00, 0x00, 0x00, 0xc0, 0xf8, 0xfe, 0x7f, 0x3f, 0x1f, 0x3f, 0xff, 
0xf0, 0xc0, 0x00, 0x00, 0x38, 0x3f, 0x3f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1f, 0x1f, 0x1e};
const unsigned char MutantePunchRightTopFar[] PROGMEM = {0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xeb, 0xff, 0x0f, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0x03, 0xff, 0xff, 0x0f, 0xff, 0xf3, 0xf1, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xef, 0xef, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc3, 
0xc7, 0xfc, 0xfd, 0xfd, 0xcc, 0xcf, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xff, 0x3f, 0x1f, 0x3f, 0x7f, 0xfe, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x1f, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f,
0x3f, 0x3f, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char MutantePunchLeftTopFar[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xeb, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f,
0x0f, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xf1, 0xf3, 0xff, 0x0f, 0xff, 0xff, 0x03, 0xf0, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xef, 0xef, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x07, 0xcf, 0xcc, 0xfd, 0xfd, 0xfc, 0xc7, 0xc3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf8, 0xfe, 0x7f, 0x3f, 0x1f, 0x3f, 0xff, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3f, 0x3f, 0x0f, 0x03, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0x1f, 0x1f, 0x1e};
const unsigned char MutantePunchRightLowFar[] PROGMEM = {0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xeb, 0xff, 0x0f, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0x03, 0xff, 0xff, 0x0f, 0xff, 0xf3, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0xef, 0xef, 0x00, 0xff, 0xff, 0xff, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x01, 0xc3, 
0xc7, 0xfc, 0xfd, 0xfd, 0xcc, 0xcf, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xff, 0x3f, 0x1f, 0x3f, 0x7f, 0xfe, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x1f, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f,
0x3f, 0x3f, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char MutantePunchLeftLowFar[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xeb, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f,
0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xf3, 0xff, 0x0f, 0xff, 0xff, 0x03, 0xf0, 0xf0, 0xe0, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0xff, 0xff, 0xff, 0x00, 0xef, 0xef, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x07, 0xcf, 0xcc, 0xfd, 0xfd, 0xfc, 0xc7, 0xc3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf8, 0xfe, 0x7f, 0x3f, 0x1f, 0x3f, 0xff, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3f, 0x3f, 0x0f, 0x03, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0x1f, 0x1f, 0x1e};
const unsigned char MutantePunchRightTopNear[] PROGMEM = {0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xeb, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xf1, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00, 0x00, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc3, 0xc7, 0xfc, 0xfd, 0xfd, 
0xcc, 0xcf, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xff, 0x3f, 0x1f, 0x3f, 0x7f, 0xfe, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x1f, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x3f, 0x3f, 0x38, 0x00, 0x00, 0x00,
0x00};
const unsigned char MutantePunchLeftTopNear[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xeb, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x0f, 0x00,
0x00, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0xf1, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xf0, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 
0xcf, 0xcc, 0xfd, 0xfd, 0xfc, 0xc7, 0xc3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf8, 0xfe, 0x7f, 0x3f, 0x1f, 0x3f, 0xff, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3f, 0x3f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1f, 0x1f,
0x1e};
const unsigned char MutantePunchRightLowNear[] PROGMEM = {0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xeb, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0x03, 0xff, 0xff, 0x0f, 0xff, 0xf3, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0xcf, 0xcf, 0xc0, 0xdd, 0xdd, 0xdd, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x00, 0x00, 0x01, 0xc3, 0xc7, 0xff, 0xff, 0xff, 
0xcf, 0xcf, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xff, 0x3f, 0x1f, 0x3f, 0x7f, 0xfe, 0xf8, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x1f, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x3f, 0x3f, 0x38, 0x00, 0x00, 0x00,
0x00};
const unsigned char MutantePunchLeftLowNear[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xeb, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x0f, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xf3, 0xff, 0x0f, 0xff, 0xff, 0x03, 0xf0, 0xf0, 0xe0, 0x00, 0x00, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0xdd, 0xdd, 0xdd, 0xc0, 0xcf, 0xcf, 0xc0, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 
0xcf, 0xcf, 0xff, 0xff, 0xff, 0xc7, 0xc3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf8, 0xfe, 0x7f, 0x3f, 0x1f, 0x3f, 0xff, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3f, 0x3f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1f, 0x1f,
0x1e};
//Pink Super Soldier
const unsigned char PinkRestRight[] PROGMEM = {0x38, 0xc6, 0x01, 0x01, 0x05, 0x0d, 0xde, 0x38, 0x00, 0x00, 0xfe, 0xff, 0x01, 0x01, 0xff, 0xc6, 0x38, 0x00, 0x00, 0xff, 0xc7, 0xc4, 0xc4, 0xff, 0xff, 0xc0, 0x80, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01};
const unsigned char PinkRunRight1[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xd8, 0x04, 0x02, 0x01, 0x05, 0x0d, 0x9d, 0x7a, 0x1c, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x98, 0x86, 0xc3, 0xf1, 0x19, 0x0b, 0xe1, 0xdd, 0xa7, 0x9a, 0x91, 0xf1,
0x00, 0x00, 0xfc, 0xfe, 0xfe, 0x3e, 0x2e, 0x2e, 0x27, 0x27, 0xe4, 0xfc, 0xdf, 0xff, 0xe0, 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00};
const unsigned char PinkRunRight2[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xd8, 0x04, 0x02, 0x01, 0x05, 0x0d, 0x9d, 0x7a, 0x1c, 0x00, 0x1c, 0x16, 0x32, 0xe2, 0x41, 0xc1, 0x81, 0x89, 0x1b, 0x3e, 0x33, 0xe1, 0x00, 0x00, 0xc0, 0xf0, 0xee, 0xc1, 0xc0, 0xc0, 0xc0,
0xf8, 0xff, 0xe1, 0x01, 0x01, 0x01, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char PinkRunRight3[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xa0, 0xd8, 0x04, 0x02, 0x01, 0x05, 0x0d, 0x9d, 0x7a, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x70, 0x4e, 0xc1, 0xc3, 0xff, 0x31, 0x41, 0x81, 0x81, 0x1f, 0x22, 0x21, 0xe1, 0x00,
0x00, 0xfc, 0xfe, 0xfe, 0x22, 0x22, 0x22, 0x23, 0x27, 0xfc, 0xc0, 0xc0, 0xc0, 0xff, 0xc1, 0xc1, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00};
const unsigned char PinkRunRight4[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xd8, 0x04, 0x02, 0x01, 0x05, 0x0d, 0x9d, 0x7a, 0x1c, 0x00, 0x1c, 0x96, 0xb2, 0xe2, 0x41, 0xc1, 0x81, 0x89, 0x1b, 0x3e, 0x33, 0xe1, 0x00, 0x00, 0xe0, 0xf8, 0xe7, 0xff, 0xc4, 0xc0, 0xc0,
0xf8, 0xc7, 0xc1, 0x81, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00};
const unsigned char PinkPunchRight[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xc6, 0x01, 0x01, 0x01, 0x05, 0xce, 0x38, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x0c, 0xff, 0x8f, 0x81, 0x81, 0x81, 0x71, 0x11, 0x11, 0x19, 0x08, 0x08, 0x08,
0x08, 0x09, 0x0e, 0x00, 0xc0, 0xf0, 0xee, 0xc1, 0xc0, 0xc0, 0xc0, 0xf8, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char PinkCrouchRight[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xd8, 0x04, 0x02, 0x01, 0x05, 0x0d, 0x9d, 0x7a, 0x1c, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x98, 0x86, 0xc3, 0xf1, 0x19, 0x0b, 0xe1, 0xdd, 0xa7, 0x9a, 0x91, 0xf1,
0x00, 0x00, 0xfc, 0xfe, 0xfe, 0x3e, 0x2e, 0x2e, 0x27, 0x27, 0xe4, 0xfc, 0xdf, 0xff, 0xf0, 0xf0, 0xf0, 0xe0, 0x00, 0x00, 0x00};
const unsigned char PinkKickRight[] PROGMEM = {0x1c, 0x62, 0x81, 0x01, 0x01, 0x0d, 0x1a, 0x1c, 0x18, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc1, 0x3a, 0x7e, 0xc6, 0x02, 0x03, 0x03, 0xa1, 0xe1, 0xe1, 0xb1,
0x1b, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x20, 0x20, 0x3f, 0x3d, 0x3f, 0x3e, 0x1b, 0x20, 0x60, 0x43, 0x46, 0x44, 0x44, 0x64, 0x7c, 0x7e, 0x7f, 0x7f, 0x3e};
const unsigned char PinkRecoilLeft[] PROGMEM = {0x38, 0x46, 0x81, 0x01, 0x05, 0x0d, 0x1e, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xfb, 0xf1, 0x11, 0x13, 0x12, 0xe2, 0x24, 0x24, 0x24, 0x4c, 0x68, 0x38, 0x00, 0x00, 0x00, 0x01, 0x1f, 0xe1, 0xc1,
0xc1, 0xcf, 0xf0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00};
const unsigned char PinkRestLeft[] PROGMEM = {0x00, 0x38, 0xde, 0x0d, 0x05, 0x01, 0x01, 0xc6, 0x38, 0x00, 0x38, 0xc6, 0xff, 0x01, 0x01, 0xff, 0xfe, 0x00, 0x80, 0xc0, 0xff, 0xff, 0xc4, 0xc4, 0xc7, 0xff, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00};
const unsigned char PinkRunLeft1[] PROGMEM = {0x1c, 0x7a, 0x9d, 0x0d, 0x05, 0x01, 0x02, 0x04, 0xd8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x91, 0x9a, 0xa7, 0xdd, 0xe1, 0x0b, 0x19, 0xf1, 0xc3, 0x86, 0x98, 0xe0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xe0, 0xe0, 0xff, 0xdf, 0xfc, 0xe4, 0x27, 0x27, 0x2e, 0x2e, 0x3e, 0xfe, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char PinkRunLeft2[] PROGMEM = {0x1c, 0x7a, 0x9d, 0x0d, 0x05, 0x01, 0x02, 0x04, 0xd8, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x33, 0x3e, 0x1b, 0x89, 0x81, 0xc1, 0x41, 0xe2, 0x32, 0x16, 0x1c, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0xe1, 0xff,
0xf8, 0xc0, 0xc0, 0xc0, 0xc1, 0xee, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03};
const unsigned char PinkRunLeft3[] PROGMEM = {0x1c, 0x7a, 0x9d, 0x0d, 0x05, 0x01, 0x02, 0x04, 0xd8, 0xa0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x21, 0x22, 0x1f, 0x81, 0x81, 0x41, 0x31, 0xff, 0xc3, 0xc1, 0x4e, 0x70, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x81, 0xc1, 0xc1, 0xff, 0xc0, 0xc0, 0xc0, 0xfc, 0x27, 0x23, 0x22, 0x22, 0x22, 0xfe, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char PinkRunLeft4[] PROGMEM = {0x1c, 0x7a, 0x9d, 0x0d, 0x05, 0x01, 0x02, 0x04, 0xd8, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x33, 0x3e, 0x1b, 0x89, 0x81, 0xc1, 0x41, 0xe2, 0xb2, 0x96, 0x1c, 0x00, 0x00, 0x00, 0x01, 0x01, 0x81, 0xc1, 0xc7,
0xf8, 0xc0, 0xc0, 0xc4, 0xff, 0xe7, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01};
const unsigned char PinkPunchLeft[] PROGMEM = {0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x38, 0xde, 0x39, 0x3d, 0x1d, 0x09, 0xc6, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x05, 0x04, 0x04, 0x07, 0x04, 0x09, 0x09, 0x1d, 0x73, 0x83, 0x85, 0x89, 0xf1, 0x01, 0x06, 0xfe,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xff, 0xc0, 0xc0, 0xc0, 0xc1, 0xff, 0xee, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00};
const unsigned char PinkCrouchLeft[] PROGMEM = {0x1c, 0x7a, 0x9d, 0x0d, 0x05, 0x01, 0x02, 0x04, 0xd8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x91, 0x9a, 0xa7, 0xdd, 0xe1, 0x0b, 0x19, 0xf1, 0xc3, 0x86, 0x98, 0xe0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xe0, 0xf0, 0xf0, 0xf0, 0xff, 0xdf, 0xfc, 0xe4, 0x27, 0x27, 0x2e, 0x2e, 0x3e, 0xfe, 0xfe, 0xfc};
const unsigned char PinkKickLeft[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x18, 0x0c, 0x1e, 0x39, 0x39, 0x1d, 0x8d, 0x62, 0x1c, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1b, 0xb1, 0xe1, 0xc1, 0x85, 0x0f,
0x9b, 0xf2, 0x06, 0x06, 0x3a, 0xc1, 0x01, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x3f, 0x26, 0x24, 0x24, 0x24, 0x26, 0xff, 0xe0, 0xe0, 0xe1, 0xe1, 0xff, 0x7f, 0x40, 0x40, 0x40, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char PinkRecoilRight[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x1e, 0x0d, 0x05, 0x01, 0x81, 0x46, 0x38, 0x38, 0x68, 0x4c, 0x24, 0x24, 0x24, 0xe2, 0x12, 0x13, 0x11, 0xf1, 0xfb, 0x06, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xf0,
0xcf, 0xc1, 0xc1, 0xe1, 0x1f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00};
//Green Super Soldier
const unsigned char GreenRestRight[] PROGMEM = {0x78, 0xac, 0x56, 0xab, 0x55, 0xaf, 0x5e, 0xbc, 0x78, 0x00, 0x00, 0x00, 0xfc, 0x57, 0xaa, 0x57, 0xaa, 0xff, 0xbc, 0x70, 0x80, 0x00, 0x00, 0xff, 0xcd, 0x4a, 0xcd, 0x4a, 0xff, 0xaa, 0xd5, 0x7f, 0x00, 0x00, 0x3f, 0x3e, 0x3d,
0x3e, 0x3d, 0x3f, 0x3f, 0x3e, 0x3e, 0x1c};
const unsigned char GreenRunRight1[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x54, 0xaa, 0x56, 0xab, 0x5d, 0xbf, 0x5d, 0x3e, 0x10, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xd8, 0xac, 0xd6, 0xaa, 0x56, 0xaa, 0x76, 0xab, 0x56, 0xab, 0x56,
0xfd, 0xc0, 0x40, 0x80, 0x80, 0xf0, 0xf0, 0xf0, 0xf0, 0xb7, 0x54, 0xb4, 0x5c, 0xab, 0x55, 0xaa, 0xd5, 0xea, 0x75, 0xfa, 0x0f, 0x07, 0x05, 0x04, 0x04, 0x07, 0x3f, 0x3f, 0x3f, 0x3f, 0x0e, 0x03, 0x02, 0x03, 0x02, 0x03, 0x07, 0x1f, 0x1e, 0x1f, 0x1e, 0x1f, 0x1f, 0x1e, 0x0e,
0x00, 0x00};
const unsigned char GreenRunRight2[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x54, 0xaa, 0x56, 0xab, 0x5d, 0xbf, 0x5d, 0x3e, 0x00, 0x00, 0x38, 0x6c, 0xd4, 0xaa, 0x56, 0xaa, 0x56, 0xaa, 0x57, 0xaa, 0xd7, 0xaa, 0xfd, 0xc0, 0x00, 0x00, 0x00,
0x00, 0x00, 0x80, 0xf0, 0xbd, 0x57, 0xae, 0x57, 0xae, 0x5f, 0xf9, 0xf0, 0x31, 0x19, 0x0e, 0x07, 0x00, 0x20, 0x3c, 0x3e, 0x3f, 0x3d, 0x3e, 0x3d, 0x3e, 0x3d, 0x3e, 0x3f, 0x1f, 0x1f, 0x1f, 0x0e, 0x00, 0x00, 0x00};
const unsigned char GreenRunRight3[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x54, 0xaa, 0x56, 0xab, 0x5d, 0xbf, 0x5d, 0x3e, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xb8, 0xd4, 0xaa, 0xd6, 0xea, 0xfe, 0xaf, 0x57, 0xaa, 0x57, 0xaa, 0x7d, 0xc0,
0x80, 0x80, 0x00, 0xe0, 0xe0, 0xe0, 0xe7, 0xa4, 0x64, 0xbc, 0x77, 0xaa, 0x55, 0xab, 0x57, 0xae, 0x75, 0x8a, 0x0d, 0x0f, 0x08, 0x09, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0e, 0x03, 0x02, 0x03, 0x1f, 0x1f, 0x1e, 0x3f, 0x3e, 0x3f, 0x3f, 0x3f, 0x3e, 0x1e, 0x00, 0x00};
const unsigned char GreenRunRight4[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x54, 0xaa, 0x56, 0xab, 0x5d, 0xbf, 0x5d, 0x3e, 0x00, 0x38, 0x6c, 0xd4, 0xaa, 0x56, 0xaa, 0x56, 0xaa, 0x57, 0xaa, 0xd7, 0xaa, 0xfd, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x80,
0xf0, 0x5d, 0xaf, 0x56, 0xaf, 0x5e, 0xaf, 0xf9, 0xf0, 0x31, 0x19, 0x0e, 0x07, 0x00, 0x1c, 0x1e, 0x1d, 0x3f, 0x3d, 0x3e, 0x3d, 0x3e, 0x3f, 0x3e, 0x3f, 0x3f, 0x3e, 0x1c, 0x00, 0x00, 0x00};
const unsigned char GreenPunchRight[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xac, 0x56, 0xaa, 0x55, 0xaf, 0xdd, 0x7f, 0x3e, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xdc, 0xea, 0x76, 0xbe, 0x56, 0xab,
0x57, 0xaa, 0xd7, 0xeb, 0x57, 0x2b, 0x35, 0x2b, 0x35, 0x2a, 0x15, 0x1f, 0x10, 0x08, 0x09, 0x06, 0x00, 0x00, 0x80, 0xf7, 0x5c, 0xab, 0x55, 0xaa, 0x55, 0xaa, 0xd5, 0xea, 0x35, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3e, 
0x3d, 0x3e, 0x3d, 0x3e, 0x3d, 0x3e, 0x3f, 0x3e, 0x1f, 0x1f, 0x1f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char GreenSquatRight[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x54, 0xaa, 0x56, 0xab, 0x5d, 0xbf, 0x5d, 0x3e, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xac, 0xd6, 0xeb, 0x55, 0xbf, 0x5f, 0xab, 0x55, 0xaa, 0x57,
0xbe, 0xf1, 0x20, 0x60, 0xc0, 0x00, 0x80, 0xc0, 0xf0, 0xf7, 0xf4, 0xb4, 0x7f, 0xbe, 0xf5, 0xaa, 0x55, 0xaa, 0x55, 0xaf, 0xdf, 0xee, 0x57, 0xae, 0xfe, 0xe3, 0x80, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x03, 0x03, 0x06, 0x07, 0x06, 0x07, 0x06, 0x03, 0x03, 0x01, 0x03, 0x0f, 
0x0f, 0x0f, 0x0f, 0x0f};
const unsigned char GreenKickRight[] PROGMEM = {0x7c, 0xd6, 0xab, 0xd5, 0xad, 0x57, 0xaf, 0x56, 0xac, 0xd8, 0xe0, 0x60, 0xb0, 0x50, 0xb0, 0x70, 0xa0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff,
0x77, 0xea, 0xd7, 0xab, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xbe, 0x4f, 0xbb, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x55, 0x6a, 0x55, 0xff, 0x1d, 0x3a, 0x35, 0xea, 0xd5, 0xaa, 0x55, 0xaa, 0x55, 
0xab, 0x5f, 0xbe, 0x5c, 0xb0, 0x50, 0xb0, 0x50, 0xf0, 0xfc, 0xfc, 0xfc, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x02, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00};
const unsigned char GreenRecoilLeft[] PROGMEM = {0x7c, 0xd6, 0xab, 0x55, 0xaf, 0x5e, 0xbc, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xd7, 0xaa, 0x57, 0xab, 0x76, 0xaa, 0x76, 0xea, 0x36, 0x2a, 0x36, 0x3e, 0x22, 0x26, 0x38, 0x00,
0x00, 0x00, 0x1f, 0xea, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0xdf, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3d, 0x3e, 0x3d, 0x3e, 0x3d, 0x3f, 0x3e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00};
const unsigned char GreenRestLeft[] PROGMEM = {0x00, 0x00, 0x78, 0xdc, 0xbe, 0x5d, 0xaf, 0x55, 0xaa, 0xd4, 0x78, 0x00, 0x80, 0xf0, 0x5c, 0xfb, 0x57, 0xaa, 0x57, 0xab, 0xfc, 0x00, 0x00, 0x7f, 0xaa, 0xd5, 0xff, 0x4d, 0xca, 0x4d, 0xca, 0xff, 0x00, 0x1c, 0x3e, 0x3e, 0x3f,
0x3f, 0x3d, 0x3e, 0x3d, 0x3e, 0x3f, 0x00};
const unsigned char GreenRunLeft1[] PROGMEM = {0x00, 0x3e, 0x7f, 0xdd, 0xaf, 0x55, 0xaa, 0x56, 0xac, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x40, 0xfd, 0x57, 0xaa, 0x57, 0xab, 0x77, 0xaa, 0x56, 0xaa, 0xd6, 0xac, 0xd8,
0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x04, 0x04, 0x04, 0x07, 0x0f, 0xfa, 0x75, 0xea, 0xd5, 0xaa, 0x55, 0xab, 0x5c, 0xb4, 0x54, 0xb7, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x0e, 0x1e, 0x1f, 0x1f, 0x1e, 0x1f, 0x1e, 0x1f, 0x07, 0x03, 0x02, 0x03, 0x02, 0x03, 0x0e, 0x3f, 0x3f,
0x3f, 0x3f};
const unsigned char GreenRunLeft2[] PROGMEM = {0x3e, 0x7f, 0xdd, 0xaf, 0x55, 0xaa, 0x56, 0xac, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xfd, 0xd7, 0xea, 0x77, 0xbb, 0x57, 0xaa, 0x56, 0xaa, 0xd6, 0xac, 0x54, 0x38, 0x00, 0x00, 0x07, 0x0e,
0x19, 0x31, 0xf0, 0xf9, 0xae, 0x5d, 0xae, 0x57, 0xab, 0x5d, 0xf0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1f, 0x1f, 0x1f, 0x3e, 0x3f, 0x3e, 0x3d, 0x3e, 0x3d, 0x3e, 0x3d, 0x3e, 0x3c};
const unsigned char GreenRunLeft3[] PROGMEM = {0x00, 0x3e, 0x5d, 0xbf, 0x5d, 0xab, 0x56, 0xaa, 0x54, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0x7d, 0xaa, 0x57, 0xaa, 0x57, 0xaf, 0xff, 0xea, 0xd6, 0xaa, 0xd4, 0xb8, 0xe0,
0x00, 0x00, 0x00, 0x0f, 0x09, 0x08, 0x0f, 0x0d, 0x8a, 0x75, 0xae, 0x57, 0xab, 0x55, 0xaa, 0x77, 0xbc, 0x64, 0xa4, 0xe7, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x1e, 0x3e, 0x3f, 0x3f, 0x3f, 0x3e, 0x3f, 0x1e, 0x1f, 0x1f, 0x03, 0x02, 0x03, 0x0e, 0x1f, 0x1f, 0x1f, 0x1f};
const unsigned char GreenRunLeft4[] PROGMEM = {0x3e, 0x7f, 0xdd, 0xaf, 0x55, 0xaa, 0x56, 0xac, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xfd, 0xd7, 0xea, 0x77, 0xbb, 0x56, 0xaa, 0x56, 0xaa, 0xd6, 0xac, 0x54, 0x38, 0x00, 0x00, 0x07, 0x0e,
0x19, 0x31, 0xf0, 0xf9, 0xae, 0x5d, 0xae, 0x57, 0xeb, 0x5d, 0xf0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3e, 0x3f, 0x3f, 0x3e, 0x3f, 0x3e, 0x3d, 0x3e, 0x3d, 0x3f, 0x1d, 0x1e, 0x1c};
const unsigned char GreenPunchLeft[] PROGMEM = {0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x3e, 0x7b, 0xfd, 0xbf, 0x5d, 0xaa, 0x56, 0xac, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x09, 0x08, 0x1e, 0x1b, 0x15, 0x2a, 0x35, 0x2b, 0x35, 0x2b,
0x57, 0xff, 0x57, 0xaa, 0x57, 0xab, 0xf6, 0xaa, 0x56, 0xaa, 0x5c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x35, 0xea, 0x55, 0xaa, 0x57, 0xae, 0x5b, 0xb2, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3e, 0x3f, 0x3f, 0x3e, 0x3f, 0x3e, 0x3d, 0x1e, 0x1f, 0x1e, 0x1d, 0x1e, 0x1c};
const unsigned char GreenSquatLeft[] PROGMEM = {0x00, 0x3e, 0x5d, 0xbf, 0x5d, 0xab, 0x56, 0xaa, 0x54, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0x20, 0xf1, 0xbe, 0x57, 0xaa, 0x55, 0xeb, 0x5f, 0xbf, 0x55, 0xeb, 0xd6, 0xac,
0xf0, 0xc0, 0x00, 0x00, 0x00, 0x80, 0xe3, 0xfe, 0xbe, 0x57, 0xee, 0xff, 0xaf, 0x55, 0xaa, 0x55, 0xaa, 0x75, 0xbe, 0x5f, 0xb4, 0xf4, 0xf7, 0xf0, 0xc0, 0x80, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x03, 0x01, 0x03, 0x03, 0x06, 0x07, 0x06, 0x07, 0x06, 0x03, 0x03, 0x07, 0x0f, 0x0f,
0x0f, 0x0f};
const unsigned char GreenKickLeft[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xb0, 0x50, 0xb0, 0x70, 0xa0, 0x60, 0xb8, 0x5c, 0xbe, 0x7f, 0xbb, 0x7d, 0xbf, 0xd6, 0xec, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0x79, 0xaa, 0x5d, 0xae, 0x4f, 0xb2, 0x63, 0xa1, 0xf3, 0xae, 0x57, 0xaa, 0xff, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0xd8, 0xb8, 0x58, 0xb8, 0x58, 0xfe, 0x57, 0xab, 0x55, 0xab, 0xff, 0xaa, 0x55, 0xaa, 0xf5, 0x2a,
0x35, 0x1e, 0xff, 0x6a, 0x55, 0x6a, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x0f, 0x3f, 0x3f, 0x3f, 0x3f, 0x0f, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00};
const unsigned char GreenRecoilRight[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0xbc, 0x5e, 0xaf, 0x55, 0xab, 0xd6, 0x7c, 0x38, 0x26, 0x22, 0x3a, 0x3e, 0x2a, 0x36, 0xea, 0x76, 0xaa, 0x76, 0xab, 0x57, 0xaa, 0xd7, 0x7f, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xdf, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xea, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3e, 0x3e, 0x3f, 0x3d, 0x3e, 0x3d, 0x3e, 0x3d, 0x07, 0x00, 0x00, 0x00, 0x00};
const unsigned char MutanteDead[] PROGMEM = {0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xe0, 0xe0, 0xf0, 0xf8, 0x0c, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x0e, 0xfe, 0x8e, 0x6e, 0x6c, 0xe0, 0xe0, 0xe8,
0xe8, 0xc8, 0xdc, 0xde, 0xde, 0xdf, 0xdf, 0x1f, 0x3f, 0x1c, 0x1c, 0x1c, 0x0e, 0x0e, 0x06, 0x06, 0x06, 0x02, 0x07, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
0x07, 0x07, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x01, 0x01, 0x07, 0x07, 0x05, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char BlueRestRight[] PROGMEM = {0x78, 0xac, 0x56, 0xab, 0x55, 0xaf, 0x5e, 0xbc, 0x78, 0x00, 0x00, 0x00, 0xfc, 0x57, 0xaa, 0x57, 0xaa, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xcd, 0x4a, 0xcd, 0x4a, 0xff, 0xff, 0x00,
0x00, 0x00, 0x00, 0x3f, 0x3e, 0x3d, 0x3e, 0x3d, 0x3f, 0x3f, 0x3e, 0x3e, 0x1c};
const unsigned char BlueRunRight1[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x54, 0xaa, 0x56, 0xab, 0x5d, 0xbf, 0x5d, 0x3e, 0x10, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xd8, 0xac, 0xd6, 0xaa, 0x56,
0xaa, 0x76, 0xab, 0x56, 0xab, 0x56, 0xfd, 0xc0, 0x40, 0x80, 0x80, 0xf0, 0xf0, 0xf0, 0xf0, 0xb7, 0x54, 0xb4, 0x5c, 0xab, 0xd5, 0xaa, 0xd5, 0xaa, 0x7d, 0xe6, 0x03, 0x03, 0x05, 0x04, 0x04, 0x07, 0x3f, 0x3f, 0x3f, 0x3f, 0x0e, 0x03, 0x02,
0x03, 0x03, 0x00, 0x07, 0x1f, 0x1e, 0x1f, 0x1e, 0x1f, 0x1f, 0x1e, 0x0e, 0x00, 0x00};
const unsigned char BlueRunRight2[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x54, 0xaa, 0x56, 0xab, 0x5d, 0xbf, 0x5d, 0x3e, 0x00, 0x00, 0x38, 0x6c, 0xd4, 0xaa, 0x56, 0xaa, 0x56, 0xaa, 0x57, 0xaa, 0xd7, 0xaa,
0xfd, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xbd, 0x57, 0xae, 0x57, 0xee, 0xbf, 0xd9, 0xf0, 0x31, 0x19, 0x0e, 0x07, 0x00, 0x20, 0x3c, 0x3e, 0x3f, 0x3d, 0x3e, 0x3d, 0x3e, 0x3f, 0x3f, 0x3e, 0x1f, 0x1f, 0x1f, 0x0e, 0x00, 0x00,
0x00};
const unsigned char BlueRunRight3[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x54, 0xaa, 0x56, 0xab, 0x5d, 0xbf, 0x5d, 0x3e, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xb8, 0xd4, 0xaa, 0xd6, 0xea, 0xfe, 0xaf,
0x57, 0xaa, 0x57, 0xaa, 0x7d, 0xc0, 0x80, 0x80, 0x00, 0xe0, 0xe0, 0xe0, 0xe7, 0xa4, 0x64, 0xa4, 0x6f, 0xba, 0x75, 0xeb, 0xd7, 0xae, 0x75, 0x8a, 0x0d, 0x0f, 0x08, 0x09, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0e, 0x03, 0x02, 0x03, 0x02, 0x03,
0x03, 0x3f, 0x3e, 0x3f, 0x3f, 0x3f, 0x3e, 0x3e, 0x38, 0x00};
const unsigned char BlueRunRight4[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x54, 0xaa, 0x56, 0xab, 0x5d, 0xbf, 0x5d, 0x3e, 0x00, 0x38, 0x6c, 0xd4, 0xaa, 0x56, 0xaa, 0x56, 0xaa, 0x57, 0xaa, 0xd7, 0xea, 0xfd,
0xc0, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0x5d, 0xaf, 0x56, 0xaf, 0xde, 0xef, 0xd9, 0x30, 0x31, 0x19, 0x0e, 0x07, 0x00, 0x1c, 0x1e, 0x1d, 0x3f, 0x3d, 0x3e, 0x3d, 0x3e, 0x3f, 0x3f, 0x3e, 0x3e, 0x3e, 0x1c, 0x00, 0x00, 0x00};
const unsigned char BluePunchRight[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xac, 0x56, 0xaa, 0x55, 0xaf, 0xdd, 0x7f, 0x3e, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xdc,
0xea, 0x76, 0xbe, 0x56, 0xab, 0x57, 0xaa, 0xd7, 0xeb, 0x57, 0x2b, 0x35, 0x2b, 0x35, 0x2a, 0x15, 0x1f, 0x10, 0x08, 0x09, 0x06, 0x00, 0x00, 0x80, 0xf7, 0x5c, 0xab, 0x55, 0xaa, 0x55, 0xea, 0x35, 0x0e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3e, 0x3d, 0x3e, 0x3d, 0x3e, 0x3d, 0x3e, 0x3f, 0x3e, 0x1f, 0x1f, 0x1f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const unsigned char BlueSquatRight[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x54, 0xaa, 0x56, 0xab, 0x5d, 0xbf, 0x5d, 0x3e, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xac, 0xd6, 0xeb, 0x55, 0xbf,
0x5f, 0xab, 0x55, 0xaa, 0x57, 0xbe, 0xf1, 0x20, 0x60, 0xc0, 0x00, 0x80, 0xc0, 0xf0, 0xf7, 0x54, 0xb4, 0x5f, 0xbe, 0xf5, 0xaa, 0x55, 0xaa, 0x55, 0xaf, 0xdf, 0xee, 0x57, 0xae, 0xfe, 0xe3, 0x80, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x03, 0x03,
0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x01, 0x03, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f};
const unsigned char BlueRecoilLeft[] PROGMEM = {0x7c, 0xd6, 0xab, 0x55, 0xaf, 0x5e, 0xbc, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xd7, 0xaa, 0x57, 0xab, 0x76, 0xaa, 0xf6, 0x2a, 0x36, 0x2a,
0x36, 0x3e, 0x22, 0x26, 0x38, 0x00, 0x00, 0x00, 0x1f, 0xea, 0x55, 0xaa, 0x55, 0xaa, 0x57, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3d, 0x3e, 0x3d, 0x3e, 0x3d, 0x3f, 0x3e, 0x3e, 0x3c, 0x00, 0x00,
0x00, 0x00};
const unsigned char BlueRestLeft[] PROGMEM = {0x00, 0x00, 0x78, 0xbc, 0x5e, 0xaf, 0x55, 0xab, 0x56, 0xac, 0x78, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xaa, 0x57, 0xaa, 0x57, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xcd, 0x4a, 0xcd,
0xff, 0x00, 0x1c, 0x3e, 0x3e, 0x3f, 0x3f, 0x3d, 0x3e, 0x3d, 0x3e, 0x3f, 0x00};
const unsigned char BlueRunLeft1[] PROGMEM = {0x10, 0x3e, 0x5d, 0xbf, 0x5d, 0xab, 0x56, 0xaa, 0x54, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0xc0, 0xfd, 0x56, 0xab, 0x56, 0xab, 0x76,
0xaa, 0x56, 0xaa, 0xd6, 0xac, 0xd8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x04, 0x04, 0x05, 0x03, 0x03, 0xe6, 0x7d, 0xaa, 0xd5, 0xaa, 0xd5, 0xab, 0x5c, 0xb4, 0x54, 0xb7, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x0e, 0x1e, 0x1f, 0x1f, 0x1e,
0x1f, 0x1e, 0x1f, 0x07, 0x00, 0x03, 0x03, 0x02, 0x03, 0x0e, 0x3f, 0x3f, 0x3f, 0x3f};
const unsigned char BlueRunLeft2[] PROGMEM = {0x3e, 0x5d, 0xbf, 0x5d, 0xab, 0x56, 0xaa, 0x54, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xfd, 0xaa, 0xd7, 0xaa, 0x57, 0xaa, 0x56, 0xaa, 0x56, 0xaa,
0xd4, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x07, 0x0e, 0x19, 0x31, 0xf0, 0xd9, 0xbf, 0xee, 0x57, 0xae, 0x57, 0xbd, 0xf0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1f, 0x1f, 0x1f, 0x3e, 0x3f, 0x3f, 0x3e, 0x3d, 0x3e, 0x3d, 0x3f, 0x3e,
0x3c, 0x20};
const unsigned char BlueRunLeft3[] PROGMEM = {0x00, 0x3e, 0x5d, 0xbf, 0x5d, 0xab, 0x56, 0xaa, 0x54, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0x7d, 0xaa, 0x57, 0xaa, 0x57, 0xaf, 0xfe,
0xea, 0xd6, 0xaa, 0xd4, 0xb8, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0x09, 0x08, 0x0f, 0x0d, 0x8a, 0x75, 0xae, 0xd7, 0xeb, 0x75, 0xba, 0x6f, 0xa4, 0x64, 0xa4, 0xe7, 0xe0, 0xe0, 0xe0, 0x00, 0x38, 0x3e, 0x3e, 0x3f, 0x3f, 0x3f, 0x3e, 0x3f, 0x03,
0x03, 0x02, 0x03, 0x02, 0x03, 0x0e, 0x1f, 0x1f, 0x1f, 0x1f};
const unsigned char BlueRunLeft4[] PROGMEM = {0x3e, 0x5d, 0xbf, 0x5d, 0xab, 0x56, 0xaa, 0x54, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xfd, 0xea, 0xd7, 0xaa, 0x57, 0xaa, 0x56, 0xaa, 0x56, 0xaa, 0xd4,
0x6c, 0x38, 0x00, 0x00, 0x07, 0x0e, 0x19, 0x31, 0x30, 0xd9, 0xef, 0xde, 0xaf, 0x56, 0xaf, 0x5d, 0xf0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3e, 0x3e, 0x3e, 0x3f, 0x3f, 0x3e, 0x3d, 0x3e, 0x3d, 0x3f, 0x1d, 0x1e, 0x1c};
const unsigned char BluePunchLeft[] PROGMEM = {0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x3e, 0x7b, 0xfd, 0xbf, 0x5d, 0xaa, 0x56, 0xac, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x09, 0x08, 0x1e, 0x1b,
0x15, 0x2a, 0x35, 0x2b, 0x35, 0x2b, 0x57, 0xff, 0x57, 0xaa, 0x57, 0xab, 0xf6, 0xaa, 0x56, 0xaa, 0x5c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x05, 0x1a, 0x75, 0xaa, 0x57,
0xae, 0x5b, 0xb2, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3e, 0x3f, 0x3f, 0x3f, 0x3f, 0x3e, 0x3d, 0x1e, 0x1f, 0x1e, 0x1d, 0x1e, 0x1c};
const unsigned char BlueSquatLeft[] PROGMEM = {0x00, 0x3e, 0x5d, 0xbf, 0x5d, 0xab, 0x56, 0xaa, 0x54, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0x20, 0xf1, 0xbe, 0x57, 0xaa, 0x55, 0xab,
0x5f, 0xbf, 0x55, 0xeb, 0xd6, 0xac, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x80, 0xe3, 0xfe, 0xae, 0x57, 0xee, 0xdf, 0xaf, 0x55, 0xaa, 0x55, 0xaa, 0xf5, 0xbe, 0x5f, 0xb4, 0x54, 0xf7, 0xf0, 0xc0, 0x80, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x03, 0x01,
0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x0f, 0x0f, 0x0f, 0x0f};
const unsigned char BlueRecoilRight[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xd8, 0xbc, 0x5e, 0xaf, 0x55, 0xab, 0xd6, 0x7c, 0x38, 0x26, 0x22, 0x3e, 0x36, 0x2a, 0x36, 0x2a, 0xf6, 0xaa, 0x76, 0xab, 0x57,
0xaa, 0xd7, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x57, 0xaa, 0x55, 0xaa, 0x55, 0xea, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3e, 0x3e, 0x3f, 0x3d, 0x3e, 0x3d, 0x3e, 0x3d, 0x07, 0x00, 0x00,
0x00, 0x00};
//
//
//Functions
//
void UpdateSprites() {
  if (SpriteFrame < SpriteCycleTime*1/4){
      arduboy.drawBitmap(Mutante.x, Mutante.y, MutanteStepRightFarFoot,15, 54, BLACK);
      arduboy.drawBitmap(human1.x, human1.y, HumanMidStep, human1.Width, human1.Height, BLACK);
      arduboy.drawBitmap(human2.x, human2.y, HumanFullStep, human2.Width, human2.Height, BLACK);
  }
  else if(SpriteFrame < SpriteCycleTime*2/4){
      arduboy.drawBitmap(Mutante.x, Mutante.y, MutanteStepRightNearFoot, 14, 54, BLACK);
      arduboy.drawBitmap(human1.x, human1.y, HumanFullStep, human1.Width, human1.Height, BLACK);
      arduboy.drawBitmap(human2.x, human2.y, HumanMidStep, human2.Width, human2.Height, BLACK);
  }
  else if(SpriteFrame < SpriteCycleTime*3/4){
      arduboy.drawBitmap(Mutante.x, Mutante.y, MutanteStepRightFarFoot, 15, 54, BLACK);
      arduboy.drawBitmap(human1.x, human1.y, HumanMidStep, human1.Width, human1.Height, BLACK);
      arduboy.drawBitmap(human2.x, human2.y, HumanFullStep, human2.Width, human2.Height, BLACK);
  }
  else {
      arduboy.drawBitmap(Mutante.x, Mutante.y, MutanteStepRightNearFoot, 14, 54, BLACK);
      arduboy.drawBitmap(human1.x, human1.y, HumanFullStep, human1.Width, human1.Height, BLACK);
      arduboy.drawBitmap(human2.x, human2.y, HumanMidStep, human2.Width, human2.Height, BLACK);
  };
};
int UpdateObjectX(int CurrentObjectX) {
  CurrentObjectX = CurrentObjectX - 1;
  if(CurrentObjectX < BackgroundBeginning){
    CurrentObjectX = CurrentObjectX + BackgroundLength;
  };
  return CurrentObjectX;
}
void UpdateBackground() {
  if(SpriteFrame % BackgroundScrollSpeed == 0){
    building.x = UpdateObjectX(building.x);
    rock1.x = UpdateObjectX(rock1.x);
    fire.x = UpdateObjectX(fire.x);
    rock2.x = UpdateObjectX(rock2.x);
  };
  if(building.x < EndOfScreen and building.x > 0 - building.Width){
    arduboy.drawBitmap(building.x, building.y, Building, building.Width, building.Height, BLACK);
  };
  if(rock1.x < EndOfScreen and rock1.x > 0 - rock1.Width){
    arduboy.drawBitmap(rock1.x, rock1.y, Rock1, rock1.Width, rock1.Height, BLACK);
  };
  if(fire.x < EndOfScreen and fire.x > 0 - fire.Width){
    //The fire object is slightly more complicated because I want to animate it.
    if(SpriteFrame < SpriteCycleTime*1/2){
      arduboy.drawBitmap(fire.x, fire.y, Fire1, fire.Width, fire.Height, BLACK);
    }
    else{
      arduboy.drawBitmap(fire.x, fire.y, Fire2, fire.Width, fire.Height, BLACK);
    }
    
  };
  if(rock2.x < EndOfScreen and rock2.x > 0 - rock2.Width){
    arduboy.drawBitmap(rock2.x, rock2.y, Rock2, rock2.Width, rock2.Height, BLACK);
  };
};

void OpeningScreen(){
    arduboy.fillScreen(WHITE);
    arduboy.drawFastHLine(1,48,127, BLACK);
    UpdateBackground();
    UpdateSprites();
    if(GameState == FirstText) {
      arduboy.print("Fort McMurray is");
      arduboy.setCursor(0,9);
      arduboy.print("being attacked.");
      arduboy.setCursor(0,0);
    };
};

void GordonScreen(){
  arduboy.drawBitmap(1, 2, GordonNoMouth, 65, 63, WHITE);
    if(SpriteFrame < SpriteCycleTime*1/2){
      arduboy.drawBitmap(29, 43, OpenMouth, 6, 6, BLACK);
    }
    else{
      arduboy.drawBitmap(30, 44, ClosedMouth, 5, 5, BLACK);
    };
    if(GameState == GordonsFace1){
      arduboy.setCursor(67,0);
      arduboy.print("Use the");
      arduboy.setCursor(67,9);
      arduboy.print("power of");
      arduboy.setCursor(67,18);
      arduboy.print("the");
      arduboy.setCursor(67, 27);
      arduboy.print("ancient");
      arduboy.setCursor(67,36);
      arduboy.print("gems to");
      arduboy.setCursor(67,45);
      arduboy.print("fight the");
      arduboy.setCursor(67,54);
      arduboy.print("monster.");
    };
    if(GameState == GordonsFace2){
      arduboy.setCursor(67,0);
      arduboy.print("Press Down,");
      arduboy.setCursor(67,9);
      arduboy.print("Left, Up,");
      arduboy.setCursor(67,18);
      arduboy.print("Right, A,");
      arduboy.setCursor(67,27);
      arduboy.print("and B in");
      arduboy.setCursor(67,36);
      arduboy.print("that order");
      arduboy.setCursor(67,45);
      arduboy.print("in order");
      arduboy.setCursor(55,54);
      arduboy.print("to transform.");
    };
    if(GameState == GordonsFace3){
      arduboy.setCursor(67,0);
      arduboy.print("Good. Now");
      arduboy.setCursor(67,9);
      arduboy.print("teleport");
      arduboy.setCursor(67,18);
      arduboy.print("to Fort");
      arduboy.setCursor(67,27);
      arduboy.print("McMurray,");
      arduboy.setCursor(67,36);
      arduboy.print("Alberta.");
      if(arduboy.justPressed(B_BUTTON)){
        GameState = Teleport1;
      };
    };
};

void TransformationScreen(){
  arduboy.fillScreen(WHITE);
  //I am putting the transform states in reverse order to prevent the player from getting through this instantaneously by hitting all six buttons simultaneously.
  if(GameState == Transform6){
    arduboy.drawBitmap(45, 12, GabbyTransformed, 37, 52, BLACK);
    if(arduboy.justPressed(B_BUTTON)){
      GameState = GordonsFace3;
    };
  };
  if(GameState == Transform5){
    arduboy.drawBitmap(54, 30, GabbyBear, 20, 34, BLACK);
    arduboy.setCursor(31,0);
    arduboy.print("POLAR BEAR!");
    if(arduboy.justPressed(B_BUTTON)){
      GameState = Transform6;
    };
  };
  if(GameState == Transform4){
    arduboy.drawBitmap(54, 30, GabbySilent, 20, 34, BLACK);
    arduboy.setCursor(31,0);
    arduboy.print("POLAR BE");
    if(arduboy.justPressed(A_BUTTON)){
      GameState = Transform5;
    };
  };
  if(GameState == Transform3){
    arduboy.drawBitmap(54, 30, GabbyBear, 20, 34, BLACK);
    arduboy.setCursor(31,0);
    arduboy.print("POLAR");
    if(arduboy.justPressed(RIGHT_BUTTON)){
      GameState = Transform4;
    };
  };
  if(GameState == Transform2){
    arduboy.drawBitmap(54, 30, GabbySilent, 20, 34, BLACK);
    arduboy.setCursor(31,0);
    arduboy.print("POL");
    if(arduboy.justPressed(UP_BUTTON)){
      GameState = Transform3;
    };
  };
  if(GameState == Transform1){
    arduboy.drawBitmap(54, 30, GabbyPo, 20, 34, BLACK);
    arduboy.setCursor(31,0);
    arduboy.print("PO");
    if(arduboy.justPressed(LEFT_BUTTON)){
      GameState = Transform2;
    };
  };
  if(GameState == Transform0){
    arduboy.drawBitmap(54, 30, GabbySilent, 20, 34, BLACK);
    if(arduboy.justPressed(DOWN_BUTTON)){
      GameState = Transform1;
    };
  };
};

void DrawTheFlashingCursor(){
  if(SpriteFrame % 2 == 1){
      arduboy.fillCircle(FlashingCursor.x,FlashingCursor.y,FlashingCursor.Width,WHITE);
    }
    else{
      arduboy.fillCircle(FlashingCursor.x,FlashingCursor.y,FlashingCursor.Width,BLACK);
    };
};

void CanadaScreen(){
  arduboy.drawBitmap(0, 0, Canada, 128, 64, WHITE);
  if(GameState == Teleport1 or GameState == Teleport2){DrawTheFlashingCursor();};
  if(GameState == Teleport3 or GameState == Teleport4){
    arduboy.setCursor(0,0);
    if(arduboy.getPixel(FlashingCursor.x,FlashingCursor.y) == BLACK){              //If the player teleported onto water (the black pixels), then they instantly drown.
      arduboy.print("You drowned");
      if(GameState == Teleport4){GameState = GameOver;};
    }
    else if(FlashingCursor.x >= GreenlandX && FlashingCursor.y < GreenlandY){      //If they teleported onto Greenland (upper right pixels that were not black), then Gor-don gets mad.
      arduboy.print("Why aren't you taking");
      arduboy.setCursor(0,9);
      arduboy.print("your job seriously?");
      if(GameState == Teleport4){GameState = GameOver;};
    }
    else{
      //The player must have teleported onto land, but too far away from Fort McMurray. The following code figures out whether they went too far north, south, southwest, ect.
      GameState = min(GameState + 1,Teleport4);
      //Calculate XError and YError
      if(FlashingCursor.x - MapTargetX < 0 - MapGenerosity){XError = TooFarWest;}
      else if(FlashingCursor.x - MapTargetX > MapGenerosity){XError = TooFarEast;}
      else{XError = None;}
      if(FlashingCursor.y - MapTargetY < 0 - MapGenerosity){YError = TooFarNorth;}
      else if(FlashingCursor.y - MapTargetY > MapGenerosity){YError = TooFarSouth;}
      else{YError = None;};
      //Combine XError and YError into 8 possible directional errors.
      if(XError == None && YError == TooFarNorth){arduboy.print("Too far north");}
      else if(XError == TooFarEast && YError == TooFarNorth){arduboy.print("Too far northeast");}
      else if(XError == TooFarEast && YError == None){arduboy.print("Too far east");}
      else if(XError == TooFarEast && YError == TooFarSouth){arduboy.print("Too far southeast");}
      else if(XError == None && YError == TooFarSouth){arduboy.print("Too far south");}
      else if(XError == TooFarWest && YError == TooFarSouth){arduboy.print("Too far southwest");}
      else if(XError == TooFarWest && YError == None){arduboy.print("Too far west");}
      else if(XError == TooFarWest && YError == TooFarNorth){arduboy.print("Too far Northwest");}
      else{
        //Success
        //All possible errors have been eliminated, so the player must have been successful.
        arduboy.print("Success!");
        if(GameState == Teleport4){GameState = Battle1;};
      };
    };
  };
  if(GameState == Teleport2){
    //Move cursor
    if(arduboy.pressed(DOWN_BUTTON)){
      FlashingCursor.y = min(FlashingCursor.y + 1,64);
    };
    if(arduboy.pressed(UP_BUTTON)){
      FlashingCursor.y = max(FlashingCursor.y - 1,1);
    };
    if(arduboy.pressed(LEFT_BUTTON)){
      FlashingCursor.x = max(FlashingCursor.x - 1,1);
    };
    if(arduboy.pressed(RIGHT_BUTTON)){
      FlashingCursor.x = min(FlashingCursor.x + 1,128);
    };
  };
  if(GameState == Teleport1){
    //Instructions
    arduboy.setCursor(0,0);
    arduboy.print("Move the flashing");
    arduboy.setCursor(0,9);
    arduboy.print("cursor,");
    arduboy.setCursor(0,55);
    arduboy.print("then press B.");
  };
  if(arduboy.justPressed(B_BUTTON)){
    if(GameState >= Teleport4){
      GameState = Teleport2;
    }
    else{
      GameState = GameState + 1;
    };
  };
  if(arduboy.justPressed(A_BUTTON)){
    GameState = Teleport2;
  };
};

void DrawMutante(){
  //I will have to double check the Width for all of these bitmaps
  //I am always drawing the Mutante sprite a little bit left of his official x position, so his x is in the middle of the sprite. The amount of subtraction I do is usually Width divided by 2.
  switch(mutante.Stance){
    case RestRight:
      arduboy.drawBitmap(mutante.x-5, mutante.y, MutanteRestRight, 11, 54, BLACK);
      break;
    case StepRight1:
      //Animation runs when monster is stepping right or left
      arduboy.drawBitmap(mutante.x-7, mutante.y, MutanteStepRightFarFoot, 15, 54, BLACK);
      if(SpriteFrame > SpriteCycleTime*1/2){
        mutante.Stance = StepRight2;
      };
      break;
    case StepRight2:
      arduboy.drawBitmap(mutante.x-7, mutante.y, MutanteStepRightNearFoot, 14, 54, BLACK);
      if(SpriteFrame == 1){
        mutante.Stance = StepRight1;
      };
      break;
    case PunchRightFarTop:
      arduboy.drawBitmap(mutante.x-9, mutante.y, MutantePunchRightTopFar, 19, 54, BLACK);
      break;
    case PunchRightFarLow:
      arduboy.drawBitmap(mutante.x-9, mutante.y, MutantePunchRightLowFar, 19, 54, BLACK);
      break;
    case PunchRightNearTop:
      arduboy.drawBitmap(mutante.x-9, mutante.y, MutantePunchRightTopNear, 18, 54, BLACK);
      break;
    case PunchRightNearLow:
      arduboy.drawBitmap(mutante.x-9, mutante.y, MutantePunchRightLowNear, 18, 54, BLACK);
      break;
    case RecoilFromLeft:
      arduboy.drawBitmap(mutante.x-5, mutante.y, MutanteRestLeft, 11, 54, BLACK);
      break;
    case RestLeft:
      arduboy.drawBitmap(mutante.x-5, mutante.y, MutanteRestLeft, 11, 54, BLACK);
      break;
    case StepLeft1:
      arduboy.drawBitmap(mutante.x-7, mutante.y, MutanteStepLeftFarFoot, 15, 54, BLACK);
       if(SpriteFrame > SpriteCycleTime*1/2){
        mutante.Stance = StepLeft2;
      };
      break;
    case StepLeft2:
      arduboy.drawBitmap(mutante.x-7, mutante.y, MutanteStepLeftNearFoot, 14, 54, BLACK);
      if(SpriteFrame == 1){
        mutante.Stance = StepLeft1;
      };
      break;
    case PunchLeftFarTop:
      arduboy.drawBitmap(mutante.x-9, mutante.y, MutantePunchLeftTopFar, 19, 54, BLACK);
      break;
    case PunchLeftFarLow:
      arduboy.drawBitmap(mutante.x-9, mutante.y, MutantePunchLeftLowFar, 19, 54, BLACK);
      break;
    case PunchLeftNearTop:
      arduboy.drawBitmap(mutante.x-9, mutante.y, MutantePunchLeftTopNear, 18, 54, BLACK);
      break;
    case PunchLeftNearLow:
      arduboy.drawBitmap(mutante.x-9, mutante.y, MutantePunchLeftLowNear, 18, 54, BLACK);
      break;
    case RecoilFromRight:
      arduboy.drawBitmap(mutante.x-5, mutante.y, MutanteRestRight, 11, 54, BLACK);
      break;
    case Dead:
      arduboy.drawBitmap(mutante.x, mutante.y + 47, MutanteDead, 54, 11, BLACK);
      break;
  };
};

void MoveMutante(){
  if(mutante.HP <= 0 && mutante.StanceDelay <= 50){
    mutante.StanceDelay = 150;
    GameState = DefeatMutante;
    mutante.Stance = Dead;
  }
  if(mutante.StanceDelay > 1){
    mutante.StanceDelay = mutante.StanceDelay - 1;
    if(mutante.HP <= 0){
      arduboy.setCursor(0,0);
      arduboy.print("You beat Mutante");
      if(mutante.StanceDelay <= 52){
        sound.noTone();
        GameState = LoadNextGame;
      }
    }
    if(mutante.Stance == RecoilFromRight){
      mutante.x = mutante.x - 1;
      sound.tone(900);
    }
    else if(mutante.Stance == RecoilFromLeft){
      mutante.x = mutante.x + 1;
      sound.tone(900);
    }
    else if(mutante.Stance == Dead){
      sound.tone(700);
    };
  }
  else{
    //Mutante only moves once every five frames to help the game run faster.
    if(SpriteFrame % 4 == 0){
      //Move Mutante Left or Right
      if(mutante.Facing == Left){mutante.x = mutante.x - 1;}
      else{mutante.x = mutante.x + 1;};
      //Make his sprite a walk left or right sprite if he just turned around or a StanceDelay is ending.
      if(XClosestToMutante < mutante.x && (mutante.Facing == Right or mutante.StanceDelay == 1)){
        mutante.Facing = Left;
        mutante.Stance = StepLeft1;
        mutante.StanceDelay = 0;
        sound.noTone();
      }
      else if(XClosestToMutante > mutante.x && (mutante.Facing == Left or mutante.StanceDelay == 1)){
        mutante.Facing = Right;
        mutante.Stance = StepRight1;
        mutante.StanceDelay = 0;
        sound.noTone();
      };
      //Making him punch if close to a Super Soldier
      if(abs(mutante.x - XClosestToMutante) < MutanteReach){
        //Throw a punch
        if(mutante.x < XClosestToMutante && mutante.Facing == Right){
          //Determine which arm should be used.
          if(ZClosestToMutante == Close && YClosestToMutante > Pink.GroundLevel - 6){mutante.Stance = PunchRightNearLow;}
          else if(ZClosestToMutante == Close && YClosestToMutante <= Pink.GroundLevel - 6){mutante.Stance = PunchRightNearTop;}
          else if(ZClosestToMutante == Far && YClosestToMutante > Pink.GroundLevel - 6){mutante.Stance = PunchRightFarLow;}
          else{mutante.Stance = PunchRightFarTop;};
          if(SoldierClosest == PinkSoldier){
            Pink.StanceDelay = 20;
            Pink.HP = Pink.HP - 1;
            Pink.Stance = RecoilFromLeft;
          }
          else if(SoldierClosest == GreenSoldier){
            Green.StanceDelay = 20;
            Green.HP = Green.HP - 1;
            Green.Stance = RecoilFromLeft;
          }
          else{
            Blue.StanceDelay = 20;
            Blue.HP = Blue.HP - 1;
            Blue.Stance = RecoilFromLeft;
          };
        }
        else if(mutante.x > XClosestToMutante && mutante.Facing == Left){
          if(ZClosestToMutante == Close && YClosestToMutante > Pink.GroundLevel - 6){mutante.Stance = PunchLeftNearLow;}
          else if(ZClosestToMutante == Close && YClosestToMutante <= Pink.GroundLevel - 6){mutante.Stance = PunchLeftNearTop;}
          else if(ZClosestToMutante == Far && YClosestToMutante > Pink.GroundLevel - 6){mutante.Stance = PunchLeftFarLow;}
          else{mutante.Stance = PunchLeftFarTop;};
          if(SoldierClosest == PinkSoldier){
            Pink.StanceDelay = 20;
            Pink.HP = Pink.HP - 1;
            Pink.Stance = RecoilFromRight;
          }
          else if(SoldierClosest == GreenSoldier){
            Green.StanceDelay = 20;
            Green.HP = Green.HP - 1;
            Green.Stance = RecoilFromRight;
          }
          else{
            Blue.StanceDelay = 20;
            Blue.HP = Blue.HP - 1;
            Blue.Stance = RecoilFromRight;
          };
        };
        mutante.StanceDelay = 20;
      };
    }
    else{
      //Calculate nearest Soldier (XClosestToMutante)
      if(abs(Pink.x - mutante.x) <= abs(Green.x - mutante.x) && abs(Pink.x - mutante.x) <= abs(Blue.x - mutante.x)){
        XClosestToMutante = Pink.x;
        YClosestToMutante = Pink.y;
        ZClosestToMutante = Pink.z;
        SoldierClosest = PinkSoldier;
      }
      else if(abs(Green.x - mutante.x) <= abs(Blue.x - mutante.x)){
        XClosestToMutante = Green.x;
        YClosestToMutante = Green.y;
        ZClosestToMutante = Green.z;
        SoldierClosest = GreenSoldier;
      }
      else{
        XClosestToMutante = Blue.x;
        YClosestToMutante = Blue.y;
        ZClosestToMutante = Blue.z;
        SoldierClosest = BlueSoldier;
      };
    };
  };
};

void DrawPink(){
  switch(Pink.Stance){
    case RestRight:
      arduboy.drawBitmap(Pink.x-4, Pink.y, PinkRestRight, 9, 26, BLACK);
      break;
    case StepRight1:
      arduboy.drawBitmap(Pink.x-9, Pink.y, PinkRunRight1, 19, 26, BLACK);
      if(SpriteFrame > SpriteCycleTime*1/4){
        Pink.Stance = StepRight2;
      };
      break;
    case StepRight2:
      arduboy.drawBitmap(Pink.x-7, Pink.y, PinkRunRight2, 15, 26, BLACK);
      if(SpriteFrame > SpriteCycleTime*2/4){
        Pink.Stance = StepRight3;
      };
      break;
    case StepRight3:
      arduboy.drawBitmap(Pink.x-9, Pink.y, PinkRunRight3, 19, 26, BLACK);
      if(SpriteFrame > SpriteCycleTime*3/4 && Pink.y == GroundPink){
        Pink.Stance = StepRight4;
      };
      break;
    case StepRight4:
      arduboy.drawBitmap(Pink.x-7, Pink.y, PinkRunRight4, 15, 26, BLACK);
      if(SpriteFrame == 1){
        Pink.Stance = StepRight1;
      };
      break;
    case PunchRight:
      arduboy.drawBitmap(Pink.x-10, Pink.y, PinkPunchRight, 20, 26, BLACK);
      break;
    case SquatRight:
      arduboy.drawBitmap(Pink.x-9, Pink.y+2, PinkCrouchRight, 19, 24, BLACK);
      break;
    case KickRight:
      arduboy.drawBitmap(Pink.x-11, Pink.y, PinkKickRight, 23, 23, BLACK);
      break;
    case RecoilFromRight:
      arduboy.drawBitmap(Pink.x-7, Pink.y, PinkRecoilLeft, 15, 26, BLACK);
      break;
    case RestLeft:
      arduboy.drawBitmap(Pink.x-4, Pink.y, PinkRestLeft, 9, 26, BLACK);
      break;
    case StepLeft1:
      arduboy.drawBitmap(Pink.x-9, Pink.y, PinkRunLeft1, 19, 26, BLACK);
      if(SpriteFrame > SpriteCycleTime*1/4){
        Pink.Stance = StepLeft2;
      };
      break;
    case StepLeft2:
      arduboy.drawBitmap(Pink.x-7, Pink.y, PinkRunLeft2, 15, 26, BLACK);
      if(SpriteFrame > SpriteCycleTime*2/4){
        Pink.Stance = StepLeft3;
      };
      break;
    case StepLeft3:
      arduboy.drawBitmap(Pink.x-9, Pink.y, PinkRunLeft3, 19, 26, BLACK);
      if(SpriteFrame > SpriteCycleTime*3/4){
        Pink.Stance = StepLeft4;
      };
      break;
    case StepLeft4:
      arduboy.drawBitmap(Pink.x-7, Pink.y, PinkRunLeft4, 15, 26, BLACK);
      if(SpriteFrame == 1){
        Pink.Stance = StepLeft1;
      };
      break;
    case PunchLeft:
      arduboy.drawBitmap(Pink.x-10, Pink.y, PinkPunchLeft, 20, 26, BLACK);
      break;
    case SquatLeft:
      arduboy.drawBitmap(Pink.x-9, Pink.y+2, PinkCrouchLeft, 19, 24, BLACK);
      break;
    case KickLeft:
      arduboy.drawBitmap(Pink.x-22, Pink.y, PinkKickLeft, 23, 23, BLACK);
      break;
    case RecoilFromLeft:
      arduboy.drawBitmap(Pink.x-7, Pink.y, PinkRecoilRight, 15, 26, BLACK);
      break;
  };
};

void ControlPink(){
  if(Pink.StanceDelay < 0){Pink.StanceDelay = Pink.StanceDelay + 1;
  }
  else if(Pink.StanceDelay > 1){
    Pink.StanceDelay = Pink.StanceDelay - 1;
  }
  else if(Pink.StanceDelay == 1){
    Pink.StanceDelay = 0;
    if(Pink.Facing == Right){
      if(Pink.Stance == KickRight){Pink.Stance = SquatRight;}
      else{Pink.Stance = RestRight;};
    }
    else{
      if(Pink.Stance == KickLeft){Pink.Stance = SquatLeft;}
      else{Pink.Stance = RestLeft;};
    };
    sound.noTone();
  };
  if(Pink.Stance == RecoilFromLeft){
    Pink.x = Pink.x + 2;
    sound.tone(200);
    if(Pink.StanceDelay == 2){
      if(Pink.HP <= 0){GameState = LoseToMutante;};
      sound.noTone();
    }
    if(Pink.StanceDelay <= 0){
      Pink.Stance = RestLeft;
      sound.noTone();
    };
  }
  else if(Pink.Stance == RecoilFromRight){
    Pink.x = Pink.x - 2;
    sound.tone(200);
    if(Pink.StanceDelay == 2){
      if(Pink.HP <= 0){GameState = LoseToMutante;};
      sound.noTone();
    }
    if(Pink.StanceDelay <= 0){
      Pink.Stance = RestRight;
      sound.noTone();
    };
  }
  else{
   if(arduboy.notPressed(DOWN_BUTTON + LEFT_BUTTON + UP_BUTTON + RIGHT_BUTTON + A_BUTTON + B_BUTTON) && Pink.y == Pink.GroundLevel){
      if(Pink.Facing == Right){Pink.Stance = RestRight;}
      else{Pink.Stance = RestLeft;};
    };
    //All of the remaining code in this function only takes place if Pink is not recoiling.
    if(arduboy.pressed(LEFT_BUTTON)){Pink.x = Pink.x-2;}
    if(arduboy.pressed(RIGHT_BUTTON)){Pink.x = Pink.x+2;}
    if(arduboy.justPressed(LEFT_BUTTON))
    {
      Pink.Stance = StepLeft1;
      Pink.Facing = Left;
    };
    if(arduboy.justPressed(RIGHT_BUTTON))
    {
      Pink.Stance = StepRight1;
      Pink.Facing = Right;
    };
    if(arduboy.justPressed(DOWN_BUTTON)){
      if(Pink.Facing == Right){Pink.Stance = SquatRight;}
      else{Pink.Stance = SquatLeft;};
    };
    if(Pink.y < Pink.GroundLevel){
      if(Pink.StanceDelay < 0){
        Pink.y = Pink.y - 3;
      }
      else{
        Pink.y = Pink.y + 3;
      };
    };
    if(arduboy.justPressed(UP_BUTTON) && Pink.y >= Pink.GroundLevel){
      if(Pink.Facing == Right){
        Pink.Stance = StepRight3;
      }
      else{
        Pink.Stance = StepLeft3;
      };
      Pink.y = Pink.y - 3;
      Pink.StanceDelay = 0-19;
    };
    if(arduboy.justPressed(B_BUTTON)){
      Pink.StanceDelay = SpriteCycleTime/2;
      if(Pink.Facing == Right){
        Pink.Stance = KickRight;
        if(Pink.y == Pink.GroundLevel && arduboy.notPressed(DOWN_BUTTON)){
          Pink.Stance = PunchRight;
        };
        if(mutante.x >= Pink.x && (mutante.x - Pink.x < SoldierPunchReach or (Pink.Stance == KickRight && mutante.x - Pink.x < PinkKickReach))){
          //Hit Mutante
          mutante.StanceDelay = 20;
          mutante.HP = mutante.HP - 1;
          mutante.Stance = RecoilFromLeft;
        }
        else if(GameState == DefeatMutante){GameState = LoadNextGame;};
      }
      else{
        Pink.Stance = KickLeft;
        if(Pink.y == Pink.GroundLevel && arduboy.notPressed(DOWN_BUTTON)){
          Pink.Stance = PunchLeft;
        };
        if(mutante.x < Pink.x && (Pink.x - mutante.x < SoldierPunchReach or (Pink.Stance == KickLeft && Pink.x - mutante.x < PinkKickReach))){
          mutante.StanceDelay = 20;
          mutante.HP = mutante.HP - 1;
          mutante.Stance = RecoilFromRight;
        }
        else if(GameState == DefeatMutante){GameState = LoadNextGame;};
      };
    };
  };
};

int DrawGreen(){
  switch(Green.Stance){
    case RestRight:
      arduboy.drawBitmap(Green.x-5, Green.y, GreenRestRight, 11, 30, BLACK);
      break;
    case StepRight1:
      arduboy.drawBitmap(Green.x-10, Green.y, GreenRunRight1, 21, 30, BLACK);
      if(SpriteFrame > SpriteCycleTime*1/4){
        Green.Stance = StepRight2;
      };
      break;
    case StepRight2:
      arduboy.drawBitmap(Green.x-9, Green.y, GreenRunRight2, 18, 30, BLACK);
      if(SpriteFrame > SpriteCycleTime*2/4){
        Green.Stance = StepRight3;
      };
      break;
    case StepRight3:
      arduboy.drawBitmap(Green.x-10, Green.y, GreenRunRight3, 20, 30, BLACK);
      if(SpriteFrame > SpriteCycleTime*3/4 && Green.y == Green.GroundLevel){
        Green.Stance = StepRight4;
      };
      break;
    case StepRight4:
      arduboy.drawBitmap(Green.x-8, Green.y, GreenRunRight4, 17, 30, BLACK);
      if(SpriteFrame == 1){
        Green.Stance = StepRight1;
      };
      break;
    case PunchRight:
      arduboy.drawBitmap(Green.x-13, Green.y, GreenPunchRight, 26, 30, BLACK);
      break;
    case SquatRight:
       arduboy.drawBitmap(Green.x-10, Green.y+2, GreenSquatRight, 21, 28, BLACK);
       break;
    case KickRight:
      arduboy.drawBitmap(Green.x-15, Green.y, GreenKickRight, 31, 26, BLACK);
      break;
    case RecoilFromRight:
      arduboy.drawBitmap(Green.x-9, Green.y, GreenRecoilLeft, 18, 30, BLACK);
      break;
    case RestLeft:
      arduboy.drawBitmap(Green.x-5, Green.y, GreenRestLeft, 11, 30, BLACK);
      break;
    case StepLeft1:
      arduboy.drawBitmap(Green.x-10, Green.y, GreenRunLeft1, 21, 30, BLACK);
      if(SpriteFrame > SpriteCycleTime*1/4){
        Green.Stance = StepLeft2;
      };
      break;
    case StepLeft2:
      arduboy.drawBitmap(Green.x-8, Green.y, GreenRunLeft2, 17, 30, BLACK);
      if(SpriteFrame > SpriteCycleTime*2/4){
        Green.Stance = StepLeft3;
      };
      break;
    case StepLeft3:
      arduboy.drawBitmap(Green.x-10, Green.y, GreenRunLeft3, 20, 30, BLACK);
      if(SpriteFrame > SpriteCycleTime*3/4){
        Green.Stance = StepLeft4;
      };
      break;
    case StepLeft4:
      arduboy.drawBitmap(Green.x-8, Green.y, GreenRunLeft4, 17, 30, BLACK);
      if(SpriteFrame == 1){
        Green.Stance = StepLeft1;
      };
      break;
    case PunchLeft:
      arduboy.drawBitmap(Green.x-13, Green.y, GreenPunchLeft, 26, 30, BLACK);
      break;
    case SquatLeft:
       arduboy.drawBitmap(Green.x-10, Green.y+2, GreenSquatLeft, 21, 28, BLACK);
       break;
    case KickLeft:
      arduboy.drawBitmap(Green.x-15, Green.y, GreenKickLeft, 31, 30, BLACK);
      break;
    case RecoilFromLeft:
      arduboy.drawBitmap(Green.x-9, Green.y, GreenRecoilRight, 18, 30, BLACK);
      break;
  };
};

//               888888    8888888    888888888  888888888  8        8
//              8      8   8      8   8          8          88       8
//             8           8      8   8          8          8 88     8
//             8           8888888    88888      888888     8   8    8
//             8     8888  8     8    8          8          8    88  8
//             8       8   8      8   8          8          8      8 8
//              8      8   8       8  8          8          8       88
//               888888    8        8 888888888  888888888  8        8
//
void MoveGreen(){
  if(Green.StanceDelay < 0){Green.StanceDelay = Green.StanceDelay + 1;
  }
  else if(Green.StanceDelay > 1){
    Green.StanceDelay = Green.StanceDelay - 1;
    if(Green.Stance == RecoilFromLeft){
      Green.x = Green.x + 2;
    }
    else if(Green.Stance == RecoilFromRight){
      Green.x = Green.x - 2;
    };
  }
  else if(Green.StanceDelay == 1){
    Green.StanceDelay = 0;
    if(Green.Facing == Right){
      if(Green.Stance == KickRight){Green.Stance = SquatRight;}
      else{Green.Stance = StepRight1;};
    }
    else{
      if(Green.Stance == KickLeft){Green.Stance = SquatLeft;}
      else{Green.Stance = StepLeft1;};
    };
  }
  else{
    //Everything below here only runs if StanceDelay is 0.
    if(Green.Stance == RecoilFromLeft){Green.Stance = RestLeft;
    }
    else if(Green.Stance == RecoilFromRight){Green.Stance = RestRight;
    };
    if(Green.y < Green.GroundLevel){Green.y = Green.y + 3;};
    if(Green.HP <= 0){
      if(mutante.x < Green.x && Green.Facing == Left){
        Green.Facing = Right;
        Green.Stance = StepRight1;
      }
      else if(mutante.x < Green.x && Green.Facing == Right){
        Green.x = Green.x + 1;
      }
      else if(mutante.x > Green.x && Green.Facing == Right){
        Green.Facing = Left;
        Green.Stance = StepLeft1;
      }
      else if(mutante.x > Green.x && Green.Facing == Left){
        Green.x = Green.x - 1;
      };
    };
    //Green only decides things once every 8 frames. This is desynched from Mutante
    if(SpriteFrame % 8 == 1){
      if(Green.Facing == Right){Green.x = Green.x + 1;}
      else{Green.x = Green.x - 1;};
      if(Green.HP <= 0){
        //Do nothing
      }
      else{
        //Everything that happens if Green's HP is not zero.
        //Face Mutante
        if(mutante.x < Green.x && Green.Facing == Right){
          Green.Facing = Left;
          Green.Stance = StepLeft1;
        }
        else if(mutante.x > Green.x && Green.Facing == Left){
          Green.Facing = Right;
          Green.Stance = StepRight1;
        };
        //Throw a punch if close
        if(abs(Green.x - mutante.x) < SoldierPunchReach){
          Green.StanceDelay = 35;
          mutante.HP = mutante.HP - 1;
          if(Green.x < mutante.x && Green.Facing == Right){
            mutante.Stance = RecoilFromLeft;
            if(Green.y > Green.GroundLevel or Green.Stance == SquatRight){Green.Stance = KickRight;}
            else{Green.Stance = PunchRight;};
          }
          else if(Green.x > mutante.x && Green.Facing == Left){
            mutante.Stance = RecoilFromRight;
            if(Green.y > Green.GroundLevel or Green.Stance == SquatLeft){Green.Stance = KickLeft;}
            else{Green.Stance = PunchLeft;};
          };
        };
      };
    };
  };
};

//BLUE
int DrawBlue(){
  switch(Blue.Stance){
    case RestRight:
      arduboy.drawBitmap(Blue.x-5, Blue.y, BlueRestRight, 11, 30, BLACK);
      break;
    case StepRight1:
      arduboy.drawBitmap(Blue.x-10, Blue.y, BlueRunRight1, 21, 30, BLACK);
      if(SpriteFrame > SpriteCycleTime*1/4){
        Blue.Stance = StepRight2;
      };
      break;
    case StepRight2:
      arduboy.drawBitmap(Blue.x-9, Blue.y, BlueRunRight2, 18, 30, BLACK);
      if(SpriteFrame > SpriteCycleTime*2/4){
        Blue.Stance = StepRight3;
      };
      break;
    case StepRight3:
      arduboy.drawBitmap(Blue.x-10, Blue.y, BlueRunRight3, 20, 30, BLACK);
      if(SpriteFrame > SpriteCycleTime*3/4 && Blue.y == Blue.GroundLevel){
        Blue.Stance = StepRight4;
      };
      break;
    case StepRight4:
      arduboy.drawBitmap(Blue.x-8, Blue.y, BlueRunRight4, 17, 30, BLACK);
      if(SpriteFrame == 1){
        Blue.Stance = StepRight1;
      };
      break;
    case PunchRight:
      arduboy.drawBitmap(Blue.x-13, Blue.y, BluePunchRight, 26, 30, BLACK);
      break;
    case SquatRight:
       arduboy.drawBitmap(Blue.x-10, Blue.y+2, BlueSquatRight, 21, 28, BLACK);
       break;
    case RecoilFromRight:
      arduboy.drawBitmap(Blue.x-9, Blue.y, BlueRecoilLeft, 18, 30, BLACK);
      break;
    case RestLeft:
      arduboy.drawBitmap(Blue.x-5, Blue.y, BlueRestLeft, 11, 30, BLACK);
      break;
    case StepLeft1:
      arduboy.drawBitmap(Blue.x-10, Blue.y, BlueRunLeft1, 21, 30, BLACK);
      if(SpriteFrame > SpriteCycleTime*1/4){
        Blue.Stance = StepLeft2;
      };
      break;
    case StepLeft2:
      arduboy.drawBitmap(Blue.x-8, Blue.y, BlueRunLeft2, 17, 30, BLACK);
      if(SpriteFrame > SpriteCycleTime*2/4){
        Blue.Stance = StepLeft3;
      };
      break;
    case StepLeft3:
      arduboy.drawBitmap(Blue.x-10, Blue.y, BlueRunLeft3, 20, 30, BLACK);
      if(SpriteFrame > SpriteCycleTime*3/4){
        Blue.Stance = StepLeft4;
      };
      break;
    case StepLeft4:
      arduboy.drawBitmap(Blue.x-8, Blue.y, BlueRunLeft4, 17, 30, BLACK);
      if(SpriteFrame == 1){
        Blue.Stance = StepLeft1;
      };
      break;
    case PunchLeft:
      arduboy.drawBitmap(Blue.x-13, Blue.y, BluePunchLeft, 26, 30, BLACK);
      break;
    case SquatLeft:
       arduboy.drawBitmap(Blue.x-10, Blue.y+2, BlueSquatLeft, 21, 28, BLACK);
       break;
    case RecoilFromLeft:
      arduboy.drawBitmap(Blue.x-9, Blue.y, BlueRecoilRight, 18, 30, BLACK);
      break;
  };
};

//             888888     8         8        8  88888888
//             8     8    8         8        8  8
//             8      8   8         8        8  8
//             8888888    8         8        8  88888
//             8      8   8         8        8  8
//             8       8  8         8        8  8
//             8      8   8          8      8   8
//             8888888    88888888    888888    88888888
//
void MoveBlue(){
  if(Blue.StanceDelay < 0){Blue.StanceDelay = Blue.StanceDelay + 1;
  }
  else if(Blue.StanceDelay > 1){
    Blue.StanceDelay = Blue.StanceDelay - 1;
    if(Blue.Stance == RecoilFromLeft){
      Blue.x = Blue.x + 2;
    }
    else if(Blue.Stance == RecoilFromRight){
      Blue.x = Blue.x - 2;
    };
  }
  else if(Blue.StanceDelay == 1){
    Blue.StanceDelay = 0;
    if(Blue.Facing == Right){
      if(Blue.Stance == KickRight){Blue.Stance = SquatRight;}
      else{Blue.Stance = StepRight1;};
    }
    else{
      if(Blue.Stance == KickLeft){Blue.Stance = SquatLeft;}
      else{Blue.Stance = StepLeft1;};
    };
  }
  else{
    //Everything below here only runs if StanceDelay is 0.
    if(Blue.Stance == RecoilFromLeft){Blue.Stance = RestLeft;
    }
    else if(Blue.Stance == RecoilFromRight){Blue.Stance = RestRight;
    };
    if(Blue.y < Blue.GroundLevel){Blue.y = Blue.y + 3;};
    if(Blue.HP <= 0){
      if(mutante.x < Blue.x && Blue.Facing == Left){
        Blue.Facing = Right;
        Blue.Stance = StepRight1;
      }
      else if(mutante.x < Blue.x && Blue.Facing == Right){
        Blue.x = Blue.x + 1;
      }
      else if(mutante.x > Blue.x && Blue.Facing == Right){
        Blue.Facing = Left;
        Blue.Stance = StepLeft1;
      }
      else if(mutante.x > Blue.x && Blue.Facing == Left){
        Blue.x = Blue.x - 1;
      };
    };
    //Green only decides things once every 8 frames. This is desynched from Mutante
    if(SpriteFrame % 8 == 1){
      if(Blue.Facing == Right){Blue.x = Blue.x + 1;}
      else{Blue.x = Blue.x - 1;};
      if(Blue.HP <= 0){
        //Do nothing
      }
      else{
        //Everything that happens if Green's HP is not zero.
        //Face Mutante
        if(mutante.x < Blue.x && Blue.Facing == Right){
          Blue.Facing = Left;
          Blue.Stance = StepLeft1;
        }
        else if(mutante.x > Blue.x && Blue.Facing == Left){
          Blue.Facing = Right;
          Blue.Stance = StepRight1;
        };
        //Throw a punch if close
        if(abs(Blue.x - mutante.x) < SoldierPunchReach){
          Blue.StanceDelay = 35;
          mutante.HP = mutante.HP - 1;
          if(Blue.x < mutante.x && Blue.Facing == Right){
            mutante.Stance = RecoilFromLeft;
            if(Blue.y > Blue.GroundLevel or Blue.Stance == SquatRight){Blue.Stance = KickRight;}
            else{Blue.Stance = PunchRight;};
          }
          else if(Blue.x > mutante.x && Blue.Facing == Left){
            mutante.Stance = RecoilFromRight;
            if(Blue.y > Blue.GroundLevel or Blue.Stance == SquatLeft){Blue.Stance = KickLeft;}
            else{Blue.Stance = PunchLeft;};
          };
        };
      };
    };
  };
};


void SmallBattleScreen(){
  arduboy.fillScreen(WHITE);
  DrawMutante();
  DrawPink();
  DrawGreen();
  ControlPink();
  MoveMutante();
  MoveGreen();
  DrawBlue();
  MoveBlue();
};

void LoseToMutanteScreen(){
  arduboy.setCursor(0,0);
  arduboy.print("You were defeated by");
  arduboy.setCursor(0,9);
  arduboy.print("Mutante easily. The");
  arduboy.setCursor(0,18);
  arduboy.print("gov't cancelled the");
  arduboy.setCursor(0,27);
  arduboy.print("Super Soldier program,");
  arduboy.setCursor(0,36);
  arduboy.print("and surrendered to");
  arduboy.setCursor(0,45);
  arduboy.print("the dragon 3");
  arduboy.setCursor(0,54);
  arduboy.print("weeks later.");
  if(arduboy.justPressed(B_BUTTON) or arduboy.justPressed(A_BUTTON)){
    GameState = GameOver;
  };
};

void LoadNextGameScreen(){
  arduboy.setCursor(39,18);
  arduboy.print("Victory");
  arduboy.setCursor(15,27);
  arduboy.print("Congratulations!");
  sound.noTone();
  //The game simply freezes here. That's okay with me.
};

void GameOverScreen(){
  arduboy.clear();
  arduboy.setCursor(40, 0);
  arduboy.print("GAME OVER");
  arduboy.setCursor(0,18);
  //arduboy.print("How did you manage to");
  arduboy.setCursor(0,27);
  //arduboy.print("lose already? The");
  arduboy.setCursor(0,36);
  //arduboy.print("game isn't even hard");
  arduboy.setCursor(0,45);
  //arduboy.print("yet.");
  if(arduboy.justPressed(B_BUTTON) or arduboy.justPressed(A_BUTTON)){
    GameState = MonsterChase;
    Pink.HP = 5;
    mutante.HP = 8;
    Green.HP = 5;
    Blue.HP = 5;
    Green.x = GreenStartX;
    Pink.x = PinkStartX;
    mutante.x = MutanteStartX;
    Blue.x = BlueStartX;
  };
};

void setup() {
  // put your setup code here, to run once:
  arduboy.begin();
  arduboy.clear();
  arduboy.setFrameRate(30);
  }
//Main program:
void loop() {
  if(!arduboy.nextFrame()) {
  return;
  };
  //Sprite frames advance by one ever frame of the game, and get checked by walking graphics and other variables.
  SpriteFrame = SpriteFrame + 1;
  if(SpriteFrame >= SpriteCycleTime){SpriteFrame = 1;};
  arduboy.clear();
  arduboy.pollButtons();
  if(arduboy.justPressed(B_BUTTON) && GameState < Transform0){
    GameState = GameState + 1;
  };
  switch(GameState){
    case MonsterChase:
      OpeningScreen();
      break;
    case FirstText:
      OpeningScreen();
      break;
    case GordonsFace1:
      GordonScreen();
      break;  
    case GordonsFace2:
      GordonScreen();
      break;
    case Transform0:
      TransformationScreen();
      break;
    case Transform1:
      TransformationScreen();
      break;
    case Transform2:
      TransformationScreen();
      break;
    case Transform3:
      TransformationScreen();
      break;
    case Transform4:
      TransformationScreen();
      break;
    case Transform5:
      TransformationScreen();
      break;
    case Transform6:
      TransformationScreen();
      break;
    case GordonsFace3:
      GordonScreen();
      break;
    case Teleport1:
      CanadaScreen();
      break;
    case Teleport2:
      CanadaScreen();
      break;
    case Teleport3:
      CanadaScreen();
      break;
    case Teleport4:
      CanadaScreen();
      break;
    case Battle1:
      SmallBattleScreen();
      break;
    case DefeatMutante:
      SmallBattleScreen();
      break;
    case LoseToMutante:
      LoseToMutanteScreen();
      break;
    case LoadNextGame:
      LoadNextGameScreen();
      break;    
    case GameOver:
      GameOverScreen();
      break;
  };
  arduboy.display();
};
